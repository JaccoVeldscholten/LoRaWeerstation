
Weerstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004124  08004124  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800412c  0800412c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000000c  08004140  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004140  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ba9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022dd  00000000  00000000  00032bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00034ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00036010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013521  00000000  00000000  00037078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001441b  00000000  00000000  0004a599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ba59  00000000  00000000  0005e9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da40d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc0  00000000  00000000  000da460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080040a0 	.word	0x080040a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080040a0 	.word	0x080040a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fecc 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f81e 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 fb8a 	bl	8000bcc <MX_GPIO_Init>
  MX_ADC_Init();
 80004b8:	f000 f896 	bl	80005e8 <MX_ADC_Init>
  MX_I2C1_Init();
 80004bc:	f000 f942 	bl	8000744 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80004c0:	f000 f980 	bl	80007c4 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80004c4:	f000 fa12 	bl	80008ec <MX_SPI1_Init>
  MX_TIM2_Init();
 80004c8:	f000 fa48 	bl	800095c <MX_TIM2_Init>
  MX_TIM22_Init();
 80004cc:	f000 fb1c 	bl	8000b08 <MX_TIM22_Init>
  MX_TIM21_Init();
 80004d0:	f000 faae 	bl	8000a30 <MX_TIM21_Init>
  MX_RTC_Init();
 80004d4:	f000 f9a6 	bl	8000824 <MX_RTC_Init>
  while (1)
  {



	  HAL_GPIO_TogglePin (DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	015a      	lsls	r2, r3, #5
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	0011      	movs	r1, r2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fba5 	bl	8001c32 <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 80004e8:	2064      	movs	r0, #100	; 0x64
 80004ea:	f000 ff1d 	bl	8001328 <HAL_Delay>
	  HAL_GPIO_TogglePin (DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80004ee:	e7f3      	b.n	80004d8 <main+0x30>

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b09b      	sub	sp, #108	; 0x6c
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	2434      	movs	r4, #52	; 0x34
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	0018      	movs	r0, r3
 80004fc:	2334      	movs	r3, #52	; 0x34
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f003 fdc5 	bl	8004090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000506:	2320      	movs	r3, #32
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	0018      	movs	r0, r3
 800050c:	2314      	movs	r3, #20
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f003 fdbd 	bl	8004090 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	0018      	movs	r0, r3
 800051a:	231c      	movs	r3, #28
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f003 fdb6 	bl	8004090 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <SystemClock_Config+0xf0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a2e      	ldr	r2, [pc, #184]	; (80005e4 <SystemClock_Config+0xf4>)
 800052a:	401a      	ands	r2, r3
 800052c:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <SystemClock_Config+0xf0>)
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	0109      	lsls	r1, r1, #4
 8000532:	430a      	orrs	r2, r1
 8000534:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000536:	0021      	movs	r1, r4
 8000538:	187b      	adds	r3, r7, r1
 800053a:	220a      	movs	r2, #10
 800053c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2201      	movs	r2, #1
 8000542:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2210      	movs	r2, #16
 8000548:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2202      	movs	r2, #2
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	03d2      	lsls	r2, r2, #15
 8000568:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	187b      	adds	r3, r7, r1
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fca9 	bl	8001ec4 <HAL_RCC_OscConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000576:	f000 fbbb 	bl	8000cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	2120      	movs	r1, #32
 800057c:	187b      	adds	r3, r7, r1
 800057e:	220f      	movs	r2, #15
 8000580:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2203      	movs	r2, #3
 8000586:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2101      	movs	r1, #1
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 fffa 	bl	8002598 <HAL_RCC_ClockConfig>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80005a8:	f000 fba2 	bl	8000cf0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	222c      	movs	r2, #44	; 0x2c
 80005b0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	0292      	lsls	r2, r2, #10
 80005c4:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 fa09 	bl	80029e0 <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80005d2:	f000 fb8d 	bl	8000cf0 <Error_Handler>
  }
}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b01b      	add	sp, #108	; 0x6c
 80005dc:	bd90      	pop	{r4, r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40007000 	.word	0x40007000
 80005e4:	ffffe7ff 	.word	0xffffe7ff

080005e8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	003b      	movs	r3, r7
 80005f0:	0018      	movs	r0, r3
 80005f2:	2308      	movs	r3, #8
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f003 fd4a 	bl	8004090 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005fc:	4b4a      	ldr	r3, [pc, #296]	; (8000728 <MX_ADC_Init+0x140>)
 80005fe:	4a4b      	ldr	r2, [pc, #300]	; (800072c <MX_ADC_Init+0x144>)
 8000600:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000602:	4b49      	ldr	r3, [pc, #292]	; (8000728 <MX_ADC_Init+0x140>)
 8000604:	2200      	movs	r2, #0
 8000606:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000608:	4b47      	ldr	r3, [pc, #284]	; (8000728 <MX_ADC_Init+0x140>)
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	05d2      	lsls	r2, r2, #23
 800060e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b45      	ldr	r3, [pc, #276]	; (8000728 <MX_ADC_Init+0x140>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000616:	4b44      	ldr	r3, [pc, #272]	; (8000728 <MX_ADC_Init+0x140>)
 8000618:	2200      	movs	r2, #0
 800061a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800061c:	4b42      	ldr	r3, [pc, #264]	; (8000728 <MX_ADC_Init+0x140>)
 800061e:	2201      	movs	r2, #1
 8000620:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b41      	ldr	r3, [pc, #260]	; (8000728 <MX_ADC_Init+0x140>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000628:	4b3f      	ldr	r3, [pc, #252]	; (8000728 <MX_ADC_Init+0x140>)
 800062a:	2220      	movs	r2, #32
 800062c:	2100      	movs	r1, #0
 800062e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000630:	4b3d      	ldr	r3, [pc, #244]	; (8000728 <MX_ADC_Init+0x140>)
 8000632:	2221      	movs	r2, #33	; 0x21
 8000634:	2100      	movs	r1, #0
 8000636:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000638:	4b3b      	ldr	r3, [pc, #236]	; (8000728 <MX_ADC_Init+0x140>)
 800063a:	2200      	movs	r2, #0
 800063c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063e:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <MX_ADC_Init+0x140>)
 8000640:	22c2      	movs	r2, #194	; 0xc2
 8000642:	32ff      	adds	r2, #255	; 0xff
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000646:	4b38      	ldr	r3, [pc, #224]	; (8000728 <MX_ADC_Init+0x140>)
 8000648:	222c      	movs	r2, #44	; 0x2c
 800064a:	2100      	movs	r1, #0
 800064c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064e:	4b36      	ldr	r3, [pc, #216]	; (8000728 <MX_ADC_Init+0x140>)
 8000650:	2204      	movs	r2, #4
 8000652:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000654:	4b34      	ldr	r3, [pc, #208]	; (8000728 <MX_ADC_Init+0x140>)
 8000656:	2200      	movs	r2, #0
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800065a:	4b33      	ldr	r3, [pc, #204]	; (8000728 <MX_ADC_Init+0x140>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <MX_ADC_Init+0x140>)
 8000662:	2200      	movs	r2, #0
 8000664:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000666:	4b30      	ldr	r3, [pc, #192]	; (8000728 <MX_ADC_Init+0x140>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800066c:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <MX_ADC_Init+0x140>)
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fe7e 	bl	8001370 <HAL_ADC_Init>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000678:	f000 fb3a 	bl	8000cf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800067c:	003b      	movs	r3, r7
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000682:	003b      	movs	r3, r7
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	0152      	lsls	r2, r2, #5
 8000688:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800068a:	003a      	movs	r2, r7
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_ADC_Init+0x140>)
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 ffe1 	bl	8001658 <HAL_ADC_ConfigChannel>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800069a:	f000 fb29 	bl	8000cf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800069e:	003b      	movs	r3, r7
 80006a0:	4a23      	ldr	r2, [pc, #140]	; (8000730 <MX_ADC_Init+0x148>)
 80006a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006a4:	003a      	movs	r2, r7
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <MX_ADC_Init+0x140>)
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 ffd4 	bl	8001658 <HAL_ADC_ConfigChannel>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80006b4:	f000 fb1c 	bl	8000cf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b8:	003b      	movs	r3, r7
 80006ba:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <MX_ADC_Init+0x14c>)
 80006bc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006be:	003a      	movs	r2, r7
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_ADC_Init+0x140>)
 80006c2:	0011      	movs	r1, r2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 ffc7 	bl	8001658 <HAL_ADC_ConfigChannel>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80006ce:	f000 fb0f 	bl	8000cf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006d2:	003b      	movs	r3, r7
 80006d4:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_ADC_Init+0x150>)
 80006d6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006d8:	003a      	movs	r2, r7
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_ADC_Init+0x140>)
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 ffba 	bl	8001658 <HAL_ADC_ConfigChannel>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80006e8:	f000 fb02 	bl	8000cf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006ec:	003b      	movs	r3, r7
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_ADC_Init+0x154>)
 80006f0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006f2:	003a      	movs	r2, r7
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_ADC_Init+0x140>)
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 ffad 	bl	8001658 <HAL_ADC_ConfigChannel>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8000702:	f000 faf5 	bl	8000cf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000706:	003b      	movs	r3, r7
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <MX_ADC_Init+0x158>)
 800070a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800070c:	003a      	movs	r2, r7
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_ADC_Init+0x140>)
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 ffa0 	bl	8001658 <HAL_ADC_ConfigChannel>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC_Init+0x138>
  {
    Error_Handler();
 800071c:	f000 fae8 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b002      	add	sp, #8
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000028 	.word	0x20000028
 800072c:	40012400 	.word	0x40012400
 8000730:	14000020 	.word	0x14000020
 8000734:	18000040 	.word	0x18000040
 8000738:	20000100 	.word	0x20000100
 800073c:	24000200 	.word	0x24000200
 8000740:	48040000 	.word	0x48040000

08000744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_I2C1_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_I2C1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <MX_I2C1_Init+0x7c>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_I2C1_Init+0x74>)
 800075c:	2201      	movs	r2, #1
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000780:	0018      	movs	r0, r3
 8000782:	f001 fa71 	bl	8001c68 <HAL_I2C_Init>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800078a:	f000 fab1 	bl	8000cf0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000790:	2100      	movs	r1, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fafe 	bl	8001d94 <HAL_I2CEx_ConfigAnalogFilter>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800079c:	f000 faa8 	bl	8000cf0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MX_I2C1_Init+0x74>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fb41 	bl	8001e2c <HAL_I2CEx_ConfigDigitalFilter>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 fa9f 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000084 	.word	0x20000084
 80007bc:	40005400 	.word	0x40005400
 80007c0:	00506682 	.word	0x00506682

080007c4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_LPUART1_UART_Init+0x54>)
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <MX_LPUART1_UART_Init+0x58>)
 80007cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_LPUART1_UART_Init+0x54>)
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <MX_LPUART1_UART_Init+0x5c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_LPUART1_UART_Init+0x54>)
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	0552      	lsls	r2, r2, #21
 80007da:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_LPUART1_UART_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_LPUART1_UART_Init+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_LPUART1_UART_Init+0x54>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_LPUART1_UART_Init+0x54>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_LPUART1_UART_Init+0x54>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_LPUART1_UART_Init+0x54>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MX_LPUART1_UART_Init+0x54>)
 8000802:	0018      	movs	r0, r3
 8000804:	f002 ff88 	bl	8003718 <HAL_UART_Init>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800080c:	f000 fa70 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	200000d0 	.word	0x200000d0
 800081c:	40004800 	.word	0x40004800
 8000820:	00033324 	.word	0x00033324

08000824 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f003 fc2c 	bl	8004090 <memset>
  RTC_DateTypeDef sDate = {0};
 8000838:	003b      	movs	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800083e:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <MX_RTC_Init+0xc0>)
 8000840:	4a29      	ldr	r2, [pc, #164]	; (80008e8 <MX_RTC_Init+0xc4>)
 8000842:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000844:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <MX_RTC_Init+0xc0>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <MX_RTC_Init+0xc0>)
 800084c:	227f      	movs	r2, #127	; 0x7f
 800084e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <MX_RTC_Init+0xc0>)
 8000852:	22ff      	movs	r2, #255	; 0xff
 8000854:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000856:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <MX_RTC_Init+0xc0>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_RTC_Init+0xc0>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <MX_RTC_Init+0xc0>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_RTC_Init+0xc0>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_RTC_Init+0xc0>)
 8000870:	0018      	movs	r0, r3
 8000872:	f002 f9eb 	bl	8002c4c <HAL_RTC_Init>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800087a:	f000 fa39 	bl	8000cf0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800089c:	1d39      	adds	r1, r7, #4
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_RTC_Init+0xc0>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	0018      	movs	r0, r3
 80008a4:	f002 fa70 	bl	8002d88 <HAL_RTC_SetTime>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 fa20 	bl	8000cf0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008b0:	003b      	movs	r3, r7
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008b6:	003b      	movs	r3, r7
 80008b8:	2201      	movs	r2, #1
 80008ba:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80008bc:	003b      	movs	r3, r7
 80008be:	2201      	movs	r2, #1
 80008c0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80008c2:	003b      	movs	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008c8:	0039      	movs	r1, r7
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_RTC_Init+0xc0>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	0018      	movs	r0, r3
 80008d0:	f002 fb1e 	bl	8002f10 <HAL_RTC_SetDate>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80008d8:	f000 fa0a 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b006      	add	sp, #24
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000154 	.word	0x20000154
 80008e8:	40002800 	.word	0x40002800

080008ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_SPI1_Init+0x68>)
 80008f2:	4a19      	ldr	r2, [pc, #100]	; (8000958 <MX_SPI1_Init+0x6c>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_SPI1_Init+0x68>)
 80008f8:	2282      	movs	r2, #130	; 0x82
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_SPI1_Init+0x68>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_SPI1_Init+0x68>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI1_Init+0x68>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_SPI1_Init+0x68>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI1_Init+0x68>)
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	02d2      	lsls	r2, r2, #11
 800091c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_SPI1_Init+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_SPI1_Init+0x68>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_SPI1_Init+0x68>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_SPI1_Init+0x68>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_SPI1_Init+0x68>)
 8000938:	2207      	movs	r2, #7
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <MX_SPI1_Init+0x68>)
 800093e:	0018      	movs	r0, r3
 8000940:	f002 fc0e 	bl	8003160 <HAL_SPI_Init>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000948:	f000 f9d2 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	20000178 	.word	0x20000178
 8000958:	40013000 	.word	0x40013000

0800095c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000962:	2310      	movs	r3, #16
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	0018      	movs	r0, r3
 8000968:	2308      	movs	r3, #8
 800096a:	001a      	movs	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f003 fb8f 	bl	8004090 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000972:	003b      	movs	r3, r7
 8000974:	0018      	movs	r0, r3
 8000976:	2310      	movs	r3, #16
 8000978:	001a      	movs	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	f003 fb88 	bl	8004090 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_TIM2_Init+0xcc>)
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	05d2      	lsls	r2, r2, #23
 8000986:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <MX_TIM2_Init+0xcc>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_TIM2_Init+0xcc>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <MX_TIM2_Init+0xcc>)
 8000996:	4a25      	ldr	r2, [pc, #148]	; (8000a2c <MX_TIM2_Init+0xd0>)
 8000998:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_TIM2_Init+0xcc>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a0:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_TIM2_Init+0xcc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_TIM2_Init+0xcc>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 fc6d 	bl	8003288 <HAL_TIM_OC_Init>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009b2:	f000 f99d 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b6:	2110      	movs	r1, #16
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c4:	187a      	adds	r2, r7, r1
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_TIM2_Init+0xcc>)
 80009c8:	0011      	movs	r1, r2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f002 fe4c 	bl	8003668 <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80009d4:	f000 f98c 	bl	8000cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009d8:	003b      	movs	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009de:	003b      	movs	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e4:	003b      	movs	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ea:	003b      	movs	r3, r7
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009f0:	0039      	movs	r1, r7
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_TIM2_Init+0xcc>)
 80009f4:	2204      	movs	r2, #4
 80009f6:	0018      	movs	r0, r3
 80009f8:	f002 fc86 	bl	8003308 <HAL_TIM_OC_ConfigChannel>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000a00:	f000 f976 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a04:	0039      	movs	r1, r7
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_TIM2_Init+0xcc>)
 8000a08:	220c      	movs	r2, #12
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f002 fc7c 	bl	8003308 <HAL_TIM_OC_ConfigChannel>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000a14:	f000 f96c 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <MX_TIM2_Init+0xcc>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fb18 	bl	8001050 <HAL_TIM_MspPostInit>

}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b006      	add	sp, #24
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200001d0 	.word	0x200001d0
 8000a2c:	0000ffff 	.word	0x0000ffff

08000a30 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a36:	2310      	movs	r3, #16
 8000a38:	18fb      	adds	r3, r7, r3
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	001a      	movs	r2, r3
 8000a40:	2100      	movs	r1, #0
 8000a42:	f003 fb25 	bl	8004090 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a46:	003b      	movs	r3, r7
 8000a48:	0018      	movs	r0, r3
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f003 fb1e 	bl	8004090 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <MX_TIM21_Init+0xcc>)
 8000a56:	4a2a      	ldr	r2, [pc, #168]	; (8000b00 <MX_TIM21_Init+0xd0>)
 8000a58:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <MX_TIM21_Init+0xcc>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <MX_TIM21_Init+0xcc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <MX_TIM21_Init+0xcc>)
 8000a68:	4a26      	ldr	r2, [pc, #152]	; (8000b04 <MX_TIM21_Init+0xd4>)
 8000a6a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <MX_TIM21_Init+0xcc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a72:	4b22      	ldr	r3, [pc, #136]	; (8000afc <MX_TIM21_Init+0xcc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <MX_TIM21_Init+0xcc>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f002 fc04 	bl	8003288 <HAL_TIM_OC_Init>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 f934 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	2110      	movs	r1, #16
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000a96:	187a      	adds	r2, r7, r1
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_TIM21_Init+0xcc>)
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 fde3 	bl	8003668 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 8000aa6:	f000 f923 	bl	8000cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abc:	003b      	movs	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac2:	0039      	movs	r1, r7
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <MX_TIM21_Init+0xcc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 fc1d 	bl	8003308 <HAL_TIM_OC_ConfigChannel>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 8000ad2:	f000 f90d 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ad6:	0039      	movs	r1, r7
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_TIM21_Init+0xcc>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	0018      	movs	r0, r3
 8000ade:	f002 fc13 	bl	8003308 <HAL_TIM_OC_ConfigChannel>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM21_Init+0xba>
  {
    Error_Handler();
 8000ae6:	f000 f903 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <MX_TIM21_Init+0xcc>)
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 faaf 	bl	8001050 <HAL_TIM_MspPostInit>

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b006      	add	sp, #24
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	20000210 	.word	0x20000210
 8000b00:	40010800 	.word	0x40010800
 8000b04:	0000ffff 	.word	0x0000ffff

08000b08 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0e:	2310      	movs	r3, #16
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	0018      	movs	r0, r3
 8000b14:	2308      	movs	r3, #8
 8000b16:	001a      	movs	r2, r3
 8000b18:	2100      	movs	r1, #0
 8000b1a:	f003 fab9 	bl	8004090 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1e:	003b      	movs	r3, r7
 8000b20:	0018      	movs	r0, r3
 8000b22:	2310      	movs	r3, #16
 8000b24:	001a      	movs	r2, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	f003 fab2 	bl	8004090 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <MX_TIM22_Init+0xb8>)
 8000b2e:	4a25      	ldr	r2, [pc, #148]	; (8000bc4 <MX_TIM22_Init+0xbc>)
 8000b30:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_TIM22_Init+0xb8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <MX_TIM22_Init+0xb8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65535;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <MX_TIM22_Init+0xb8>)
 8000b40:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <MX_TIM22_Init+0xc0>)
 8000b42:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <MX_TIM22_Init+0xb8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_TIM22_Init+0xb8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_TIM22_Init+0xb8>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f002 fb98 	bl	8003288 <HAL_TIM_OC_Init>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 8000b5c:	f000 f8c8 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b60:	2110      	movs	r1, #16
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000b6e:	187a      	adds	r2, r7, r1
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_TIM22_Init+0xb8>)
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f002 fd77 	bl	8003668 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7a:	1e03      	subs	r3, r0, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM22_Init+0x7a>
  {
    Error_Handler();
 8000b7e:	f000 f8b7 	bl	8000cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b82:	003b      	movs	r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b88:	003b      	movs	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8e:	003b      	movs	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b94:	003b      	movs	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9a:	0039      	movs	r1, r7
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_TIM22_Init+0xb8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f002 fbb1 	bl	8003308 <HAL_TIM_OC_ConfigChannel>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM22_Init+0xa6>
  {
    Error_Handler();
 8000baa:	f000 f8a1 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <MX_TIM22_Init+0xb8>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fa4d 	bl	8001050 <HAL_TIM_MspPostInit>

}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b006      	add	sp, #24
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	20000250 	.word	0x20000250
 8000bc4:	40011400 	.word	0x40011400
 8000bc8:	0000ffff 	.word	0x0000ffff

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	240c      	movs	r4, #12
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	2314      	movs	r3, #20
 8000bda:	001a      	movs	r2, r3
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f003 fa57 	bl	8004090 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000be8:	2104      	movs	r1, #4
 8000bea:	430a      	orrs	r2, r1
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c06:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c16:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000c18:	2102      	movs	r1, #2
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	2202      	movs	r2, #2
 8000c24:	4013      	ands	r3, r2
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CUSTOM_03_Pin|CUSTOM_02_Pin|CUSTOM_00_Pin|RESET_CSS_Pin, GPIO_PIN_RESET);
 8000c2a:	23b1      	movs	r3, #177	; 0xb1
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	482f      	ldr	r0, [pc, #188]	; (8000cec <MX_GPIO_Init+0x120>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	0019      	movs	r1, r3
 8000c34:	f000 ffe0 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BME280_CS_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8000c38:	23a0      	movs	r3, #160	; 0xa0
 8000c3a:	0159      	lsls	r1, r3, #5
 8000c3c:	23a0      	movs	r3, #160	; 0xa0
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	2200      	movs	r2, #0
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 ffd8 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WATER_METER_Pin */
  GPIO_InitStruct.Pin = WATER_METER_Pin;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2210      	movs	r2, #16
 8000c4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2288      	movs	r2, #136	; 0x88
 8000c52:	0352      	lsls	r2, r2, #13
 8000c54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(WATER_METER_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	193a      	adds	r2, r7, r4
 8000c5e:	23a0      	movs	r3, #160	; 0xa0
 8000c60:	05db      	lsls	r3, r3, #23
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 fe51 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : CUSTOM_03_Pin CUSTOM_02_Pin CUSTOM_00_Pin RESET_CSS_Pin */
  GPIO_InitStruct.Pin = CUSTOM_03_Pin|CUSTOM_02_Pin|CUSTOM_00_Pin|RESET_CSS_Pin;
 8000c6a:	0021      	movs	r1, r4
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	22b1      	movs	r2, #177	; 0xb1
 8000c70:	0212      	lsls	r2, r2, #8
 8000c72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	000c      	movs	r4, r1
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2201      	movs	r2, #1
 8000c7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	4a18      	ldr	r2, [pc, #96]	; (8000cec <MX_GPIO_Init+0x120>)
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	0010      	movs	r0, r2
 8000c90:	f000 fe3c 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : BME280_CS_Pin DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = BME280_CS_Pin|DEBUG_LED_Pin;
 8000c94:	0021      	movs	r1, r4
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	22a0      	movs	r2, #160	; 0xa0
 8000c9a:	0152      	lsls	r2, r2, #5
 8000c9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	193a      	adds	r2, r7, r4
 8000cb4:	23a0      	movs	r3, #160	; 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	0011      	movs	r1, r2
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 fe26 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_CSS_Pin */
  GPIO_InitStruct.Pin = INT_CSS_Pin;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_CSS_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	4a05      	ldr	r2, [pc, #20]	; (8000cec <MX_GPIO_Init+0x120>)
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	0010      	movs	r0, r2
 8000cda:	f000 fe17 	bl	800190c <HAL_GPIO_Init>

}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b009      	add	sp, #36	; 0x24
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	50000400 	.word	0x50000400

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <HAL_MspInit+0x24>)
 8000d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_MspInit+0x24>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <HAL_MspInit+0x24>)
 8000d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_MspInit+0x24>)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	0549      	lsls	r1, r1, #21
 8000d16:	430a      	orrs	r2, r1
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b08b      	sub	sp, #44	; 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	2414      	movs	r4, #20
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	0018      	movs	r0, r3
 8000d32:	2314      	movs	r3, #20
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f003 f9aa 	bl	8004090 <memset>
  if(hadc->Instance==ADC1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <HAL_ADC_MspInit+0xa8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d13d      	bne.n	8000dc2 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d46:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <HAL_ADC_MspInit+0xac>)
 8000d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_ADC_MspInit+0xac>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	0089      	lsls	r1, r1, #2
 8000d50:	430a      	orrs	r2, r1
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_ADC_MspInit+0xac>)
 8000d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_ADC_MspInit+0xac>)
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_ADC_MspInit+0xac>)
 8000d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d64:	2201      	movs	r2, #1
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_ADC_MspInit+0xac>)
 8000d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_ADC_MspInit+0xac>)
 8000d72:	2102      	movs	r1, #2
 8000d74:	430a      	orrs	r2, r1
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_ADC_MspInit+0xac>)
 8000d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = BATTERY_VOLTAGE_Pin|ANEMOMETER_Pin|WIND_VANE_Pin;
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	2261      	movs	r2, #97	; 0x61
 8000d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	193a      	adds	r2, r7, r4
 8000d98:	23a0      	movs	r3, #160	; 0xa0
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 fdb4 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SOLAR_VOLTAGE_Pin|ADC_IN9_Pin;
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	2203      	movs	r2, #3
 8000da8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2203      	movs	r2, #3
 8000dae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_ADC_MspInit+0xb0>)
 8000dba:	0019      	movs	r1, r3
 8000dbc:	0010      	movs	r0, r2
 8000dbe:	f000 fda5 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b00b      	add	sp, #44	; 0x2c
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40012400 	.word	0x40012400
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	50000400 	.word	0x50000400

08000dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	240c      	movs	r4, #12
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	0018      	movs	r0, r3
 8000de6:	2314      	movs	r3, #20
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f003 f950 	bl	8004090 <memset>
  if(hi2c->Instance==I2C1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_I2C_MspInit+0x7c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d128      	bne.n	8000e4c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_I2C_MspInit+0x80>)
 8000dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_I2C_MspInit+0x80>)
 8000e00:	2102      	movs	r1, #2
 8000e02:	430a      	orrs	r2, r1
 8000e04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_I2C_MspInit+0x80>)
 8000e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e12:	0021      	movs	r1, r4
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	22c0      	movs	r2, #192	; 0xc0
 8000e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2212      	movs	r2, #18
 8000e1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2201      	movs	r2, #1
 8000e30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <HAL_I2C_MspInit+0x84>)
 8000e36:	0019      	movs	r1, r3
 8000e38:	0010      	movs	r0, r2
 8000e3a:	f000 fd67 	bl	800190c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_I2C_MspInit+0x80>)
 8000e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_I2C_MspInit+0x80>)
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	0389      	lsls	r1, r1, #14
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b009      	add	sp, #36	; 0x24
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	40005400 	.word	0x40005400
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	50000400 	.word	0x50000400

08000e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	240c      	movs	r4, #12
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	2314      	movs	r3, #20
 8000e70:	001a      	movs	r2, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	f003 f90c 	bl	8004090 <memset>
  if(huart->Instance==LPUART1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <HAL_UART_MspInit+0x80>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d129      	bne.n	8000ed6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_UART_MspInit+0x84>)
 8000e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_UART_MspInit+0x84>)
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	02c9      	lsls	r1, r1, #11
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_UART_MspInit+0x84>)
 8000e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_UART_MspInit+0x84>)
 8000e96:	2102      	movs	r1, #2
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_UART_MspInit+0x84>)
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	22c0      	movs	r2, #192	; 0xc0
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	0021      	movs	r1, r4
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_UART_MspInit+0x88>)
 8000ece:	0019      	movs	r1, r3
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	f000 fd1b 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b009      	add	sp, #36	; 0x24
 8000edc:	bd90      	pop	{r4, r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	40004800 	.word	0x40004800
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	50000400 	.word	0x50000400

08000eec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_RTC_MspInit+0x28>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d106      	bne.n	8000f0c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_RTC_MspInit+0x2c>)
 8000f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_RTC_MspInit+0x2c>)
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	02c9      	lsls	r1, r1, #11
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40002800 	.word	0x40002800
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b08b      	sub	sp, #44	; 0x2c
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	2414      	movs	r4, #20
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	0018      	movs	r0, r3
 8000f2a:	2314      	movs	r3, #20
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f003 f8ae 	bl	8004090 <memset>
  if(hspi->Instance==SPI1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <HAL_SPI_MspInit+0xc0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d14a      	bne.n	8000fd4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <HAL_SPI_MspInit+0xc4>)
 8000f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f42:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <HAL_SPI_MspInit+0xc4>)
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	0149      	lsls	r1, r1, #5
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <HAL_SPI_MspInit+0xc4>)
 8000f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <HAL_SPI_MspInit+0xc4>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	430a      	orrs	r2, r1
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_SPI_MspInit+0xc4>)
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_SPI_MspInit+0xc4>)
 8000f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <HAL_SPI_MspInit+0xc4>)
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_SPI_MspInit+0xc4>)
 8000f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f74:	2202      	movs	r2, #2
 8000f76:	4013      	ands	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_15;
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <HAL_SPI_MspInit+0xc8>)
 8000f80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	2202      	movs	r2, #2
 8000f86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	2203      	movs	r2, #3
 8000f92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	193a      	adds	r2, r7, r4
 8000f9c:	23a0      	movs	r3, #160	; 0xa0
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fcb2 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa8:	0021      	movs	r1, r4
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2208      	movs	r2, #8
 8000fae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_SPI_MspInit+0xcc>)
 8000fcc:	0019      	movs	r1, r3
 8000fce:	0010      	movs	r0, r2
 8000fd0:	f000 fc9c 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b00b      	add	sp, #44	; 0x2c
 8000fda:	bd90      	pop	{r4, r7, pc}
 8000fdc:	40013000 	.word	0x40013000
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	00008880 	.word	0x00008880
 8000fe8:	50000400 	.word	0x50000400

08000fec <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d106      	bne.n	800100e <HAL_TIM_OC_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_TIM_OC_MspInit+0x58>)
 8001002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_TIM_OC_MspInit+0x58>)
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 800100c:	e016      	b.n	800103c <HAL_TIM_OC_MspInit+0x50>
  else if(htim_oc->Instance==TIM21)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <HAL_TIM_OC_MspInit+0x5c>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d106      	bne.n	8001026 <HAL_TIM_OC_MspInit+0x3a>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_TIM_OC_MspInit+0x58>)
 800101a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_TIM_OC_MspInit+0x58>)
 800101e:	2104      	movs	r1, #4
 8001020:	430a      	orrs	r2, r1
 8001022:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001024:	e00a      	b.n	800103c <HAL_TIM_OC_MspInit+0x50>
  else if(htim_oc->Instance==TIM22)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <HAL_TIM_OC_MspInit+0x60>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d105      	bne.n	800103c <HAL_TIM_OC_MspInit+0x50>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <HAL_TIM_OC_MspInit+0x58>)
 8001032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_TIM_OC_MspInit+0x58>)
 8001036:	2120      	movs	r1, #32
 8001038:	430a      	orrs	r2, r1
 800103a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	40010800 	.word	0x40010800
 800104c:	40011400 	.word	0x40011400

08001050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08d      	sub	sp, #52	; 0x34
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	241c      	movs	r4, #28
 800105a:	193b      	adds	r3, r7, r4
 800105c:	0018      	movs	r0, r3
 800105e:	2314      	movs	r3, #20
 8001060:	001a      	movs	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f003 f814 	bl	8004090 <memset>
  if(htim->Instance==TIM2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	05db      	lsls	r3, r3, #23
 8001070:	429a      	cmp	r2, r3
 8001072:	d123      	bne.n	80010bc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b4d      	ldr	r3, [pc, #308]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 8001076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001078:	4b4c      	ldr	r3, [pc, #304]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 800107a:	2101      	movs	r1, #1
 800107c:	430a      	orrs	r2, r1
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001080:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	2201      	movs	r2, #1
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SENSE_CSS_Pin|POWER_ENABLE_Pin;
 800108c:	0021      	movs	r1, r4
 800108e:	187b      	adds	r3, r7, r1
 8001090:	220a      	movs	r2, #10
 8001092:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2202      	movs	r2, #2
 8001098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2202      	movs	r2, #2
 80010aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	187a      	adds	r2, r7, r1
 80010ae:	23a0      	movs	r3, #160	; 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fc29 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 80010ba:	e072      	b.n	80011a2 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM21)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a3b      	ldr	r2, [pc, #236]	; (80011b0 <HAL_TIM_MspPostInit+0x160>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d146      	bne.n	8001154 <HAL_TIM_MspPostInit+0x104>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b39      	ldr	r3, [pc, #228]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 80010c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	430a      	orrs	r2, r1
 80010d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010d2:	4b36      	ldr	r3, [pc, #216]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	2201      	movs	r2, #1
 80010d8:	4013      	ands	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b33      	ldr	r3, [pc, #204]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 80010e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e2:	4b32      	ldr	r3, [pc, #200]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 80010e4:	2102      	movs	r1, #2
 80010e6:	430a      	orrs	r2, r1
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	2202      	movs	r2, #2
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DIO0_Pin;
 80010f6:	241c      	movs	r4, #28
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	2204      	movs	r2, #4
 80010fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	2202      	movs	r2, #2
 8001102:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8001110:	193b      	adds	r3, r7, r4
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001116:	193a      	adds	r2, r7, r4
 8001118:	23a0      	movs	r3, #160	; 0xa0
 800111a:	05db      	lsls	r3, r3, #23
 800111c:	0011      	movs	r1, r2
 800111e:	0018      	movs	r0, r3
 8001120:	f000 fbf4 	bl	800190c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIO5_Pin;
 8001124:	0021      	movs	r1, r4
 8001126:	187b      	adds	r3, r7, r1
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	01d2      	lsls	r2, r2, #7
 800112c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2202      	movs	r2, #2
 8001132:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2206      	movs	r2, #6
 8001144:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DIO5_GPIO_Port, &GPIO_InitStruct);
 8001146:	187b      	adds	r3, r7, r1
 8001148:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_TIM_MspPostInit+0x164>)
 800114a:	0019      	movs	r1, r3
 800114c:	0010      	movs	r0, r2
 800114e:	f000 fbdd 	bl	800190c <HAL_GPIO_Init>
}
 8001152:	e026      	b.n	80011a2 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM22)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_TIM_MspPostInit+0x168>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d121      	bne.n	80011a2 <HAL_TIM_MspPostInit+0x152>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 8001160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 8001164:	2102      	movs	r1, #2
 8001166:	430a      	orrs	r2, r1
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_TIM_MspPostInit+0x15c>)
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	2202      	movs	r2, #2
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM22_CH1_Pin;
 8001176:	211c      	movs	r1, #28
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2210      	movs	r2, #16
 800117c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2202      	movs	r2, #2
 8001182:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2204      	movs	r2, #4
 8001194:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM22_CH1_GPIO_Port, &GPIO_InitStruct);
 8001196:	187b      	adds	r3, r7, r1
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_TIM_MspPostInit+0x164>)
 800119a:	0019      	movs	r1, r3
 800119c:	0010      	movs	r0, r2
 800119e:	f000 fbb5 	bl	800190c <HAL_GPIO_Init>
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b00d      	add	sp, #52	; 0x34
 80011a8:	bd90      	pop	{r4, r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010800 	.word	0x40010800
 80011b4:	50000400 	.word	0x50000400
 80011b8:	40011400 	.word	0x40011400

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <NMI_Handler+0x4>

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler+0x4>

080011c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 f886 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80011f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopForever+0x6>)
  ldr r1, =_edata
 80011fa:	490e      	ldr	r1, [pc, #56]	; (8001234 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <LoopForever+0xe>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001210:	4c0b      	ldr	r4, [pc, #44]	; (8001240 <LoopForever+0x16>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800121e:	f7ff ffe4 	bl	80011ea <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001222:	f002 ff11 	bl	8004048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff f93f 	bl	80004a8 <main>

0800122a <LoopForever>:

LoopForever:
    b LoopForever
 800122a:	e7fe      	b.n	800122a <LoopForever>
   ldr   r0, =_estack
 800122c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001238:	08004134 	.word	0x08004134
  ldr r2, =_sbss
 800123c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001240:	20000294 	.word	0x20000294

08001244 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_COMP_IRQHandler>
	...

08001248 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_Init+0x3c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Init+0x3c>)
 800125a:	2140      	movs	r1, #64	; 0x40
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f811 	bl	8001288 <HAL_InitTick>
 8001266:	1e03      	subs	r3, r0, #0
 8001268:	d003      	beq.n	8001272 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e001      	b.n	8001276 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001272:	f7ff fd43 	bl	8000cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	40022000 	.word	0x40022000

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_InitTick+0x5c>)
 8001292:	681c      	ldr	r4, [r3, #0]
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_InitTick+0x60>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	0019      	movs	r1, r3
 800129a:	23fa      	movs	r3, #250	; 0xfa
 800129c:	0098      	lsls	r0, r3, #2
 800129e:	f7fe ff33 	bl	8000108 <__udivsi3>
 80012a2:	0003      	movs	r3, r0
 80012a4:	0019      	movs	r1, r3
 80012a6:	0020      	movs	r0, r4
 80012a8:	f7fe ff2e 	bl	8000108 <__udivsi3>
 80012ac:	0003      	movs	r3, r0
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 fb1f 	bl	80018f2 <HAL_SYSTICK_Config>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e00f      	b.n	80012dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d80b      	bhi.n	80012da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	2301      	movs	r3, #1
 80012c6:	425b      	negs	r3, r3
 80012c8:	2200      	movs	r2, #0
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 fafc 	bl	80018c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_InitTick+0x64>)
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	0018      	movs	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	b003      	add	sp, #12
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_IncTick+0x1c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	001a      	movs	r2, r3
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_IncTick+0x20>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	18d2      	adds	r2, r2, r3
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_IncTick+0x20>)
 8001302:	601a      	str	r2, [r3, #0]
}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	20000008 	.word	0x20000008
 8001310:	20000290 	.word	0x20000290

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b02      	ldr	r3, [pc, #8]	; (8001324 <HAL_GetTick+0x10>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	20000290 	.word	0x20000290

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff fff0 	bl	8001314 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3301      	adds	r3, #1
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	001a      	movs	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	189b      	adds	r3, r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	f7ff ffe0 	bl	8001314 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b004      	add	sp, #16
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	20000008 	.word	0x20000008

08001370 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e159      	b.n	8001636 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10a      	bne.n	80013a0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2250      	movs	r2, #80	; 0x50
 8001394:	2100      	movs	r1, #0
 8001396:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	0018      	movs	r0, r3
 800139c:	f7ff fcc2 	bl	8000d24 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a4:	2210      	movs	r2, #16
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d005      	beq.n	80013b8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2204      	movs	r2, #4
 80013b4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80013b6:	d00b      	beq.n	80013d0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013bc:	2210      	movs	r2, #16
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2250      	movs	r2, #80	; 0x50
 80013c8:	2100      	movs	r1, #0
 80013ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e132      	b.n	8001636 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	4a9a      	ldr	r2, [pc, #616]	; (8001640 <HAL_ADC_Init+0x2d0>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	2202      	movs	r2, #2
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2203      	movs	r2, #3
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d108      	bne.n	8001400 <HAL_ADC_Init+0x90>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_ADC_Init+0x90>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <HAL_ADC_Init+0x92>
 8001400:	2300      	movs	r3, #0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d149      	bne.n	800149a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	23c0      	movs	r3, #192	; 0xc0
 800140c:	061b      	lsls	r3, r3, #24
 800140e:	429a      	cmp	r2, r3
 8001410:	d00b      	beq.n	800142a <HAL_ADC_Init+0xba>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	2380      	movs	r3, #128	; 0x80
 8001418:	05db      	lsls	r3, r3, #23
 800141a:	429a      	cmp	r2, r3
 800141c:	d005      	beq.n	800142a <HAL_ADC_Init+0xba>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	061b      	lsls	r3, r3, #24
 8001426:	429a      	cmp	r2, r3
 8001428:	d111      	bne.n	800144e <HAL_ADC_Init+0xde>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	0892      	lsrs	r2, r2, #2
 8001438:	611a      	str	r2, [r3, #16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6919      	ldr	r1, [r3, #16]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	e014      	b.n	8001478 <HAL_ADC_Init+0x108>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	0892      	lsrs	r2, r2, #2
 800145c:	611a      	str	r2, [r3, #16]
 800145e:	4b79      	ldr	r3, [pc, #484]	; (8001644 <HAL_ADC_Init+0x2d4>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b78      	ldr	r3, [pc, #480]	; (8001644 <HAL_ADC_Init+0x2d4>)
 8001464:	4978      	ldr	r1, [pc, #480]	; (8001648 <HAL_ADC_Init+0x2d8>)
 8001466:	400a      	ands	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	4b76      	ldr	r3, [pc, #472]	; (8001644 <HAL_ADC_Init+0x2d4>)
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4b74      	ldr	r3, [pc, #464]	; (8001644 <HAL_ADC_Init+0x2d4>)
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2118      	movs	r1, #24
 8001484:	438a      	bics	r2, r1
 8001486:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68d9      	ldr	r1, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800149a:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <HAL_ADC_Init+0x2d4>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b69      	ldr	r3, [pc, #420]	; (8001644 <HAL_ADC_Init+0x2d4>)
 80014a0:	496a      	ldr	r1, [pc, #424]	; (800164c <HAL_ADC_Init+0x2dc>)
 80014a2:	400a      	ands	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80014a6:	4b67      	ldr	r3, [pc, #412]	; (8001644 <HAL_ADC_Init+0x2d4>)
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ae:	065a      	lsls	r2, r3, #25
 80014b0:	4b64      	ldr	r3, [pc, #400]	; (8001644 <HAL_ADC_Init+0x2d4>)
 80014b2:	430a      	orrs	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	055b      	lsls	r3, r3, #21
 80014c0:	4013      	ands	r3, r2
 80014c2:	d108      	bne.n	80014d6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	0549      	lsls	r1, r1, #21
 80014d2:	430a      	orrs	r2, r1
 80014d4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	495b      	ldr	r1, [pc, #364]	; (8001650 <HAL_ADC_Init+0x2e0>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68d9      	ldr	r1, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d101      	bne.n	80014fc <HAL_ADC_Init+0x18c>
 80014f8:	2304      	movs	r3, #4
 80014fa:	e000      	b.n	80014fe <HAL_ADC_Init+0x18e>
 80014fc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80014fe:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2020      	movs	r0, #32
 8001504:	5c1b      	ldrb	r3, [r3, r0]
 8001506:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001508:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	202c      	movs	r0, #44	; 0x2c
 800150e:	5c1b      	ldrb	r3, [r3, r0]
 8001510:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001512:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001518:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001520:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001528:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001536:	23c2      	movs	r3, #194	; 0xc2
 8001538:	33ff      	adds	r3, #255	; 0xff
 800153a:	429a      	cmp	r2, r3
 800153c:	d00b      	beq.n	8001556 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68d9      	ldr	r1, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2221      	movs	r2, #33	; 0x21
 800155a:	5c9b      	ldrb	r3, [r3, r2]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d11a      	bne.n	8001596 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	5c9b      	ldrb	r3, [r3, r2]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0249      	lsls	r1, r1, #9
 8001578:	430a      	orrs	r2, r1
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	e00b      	b.n	8001596 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	2220      	movs	r2, #32
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	2201      	movs	r2, #1
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159a:	2b01      	cmp	r3, #1
 800159c:	d11f      	bne.n	80015de <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	492a      	ldr	r1, [pc, #168]	; (8001654 <HAL_ADC_Init+0x2e4>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6919      	ldr	r1, [r3, #16]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80015bc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80015c2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	e00e      	b.n	80015fc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	2201      	movs	r2, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2101      	movs	r1, #1
 80015f8:	438a      	bics	r2, r1
 80015fa:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2107      	movs	r1, #7
 8001608:	438a      	bics	r2, r1
 800160a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6959      	ldr	r1, [r3, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	2203      	movs	r2, #3
 800162a:	4393      	bics	r3, r2
 800162c:	2201      	movs	r2, #1
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	fffffefd 	.word	0xfffffefd
 8001644:	40012708 	.word	0x40012708
 8001648:	ffc3ffff 	.word	0xffc3ffff
 800164c:	fdffffff 	.word	0xfdffffff
 8001650:	fffe0219 	.word	0xfffe0219
 8001654:	fffffc03 	.word	0xfffffc03

08001658 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2250      	movs	r2, #80	; 0x50
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x18>
 800166c:	2302      	movs	r3, #2
 800166e:	e06c      	b.n	800174a <HAL_ADC_ConfigChannel+0xf2>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2250      	movs	r2, #80	; 0x50
 8001674:	2101      	movs	r1, #1
 8001676:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2204      	movs	r2, #4
 8001680:	4013      	ands	r3, r2
 8001682:	d00b      	beq.n	800169c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001688:	2220      	movs	r2, #32
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2250      	movs	r2, #80	; 0x50
 8001694:	2100      	movs	r1, #0
 8001696:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e056      	b.n	800174a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a2c      	ldr	r2, [pc, #176]	; (8001754 <HAL_ADC_ConfigChannel+0xfc>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d028      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	035b      	lsls	r3, r3, #13
 80016b2:	0b5a      	lsrs	r2, r3, #13
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	02db      	lsls	r3, r3, #11
 80016c4:	4013      	ands	r3, r2
 80016c6:	d009      	beq.n	80016dc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_ADC_ConfigChannel+0x100>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_ADC_ConfigChannel+0x100>)
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	0409      	lsls	r1, r1, #16
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80016d6:	200a      	movs	r0, #10
 80016d8:	f000 f844 	bl	8001764 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	029b      	lsls	r3, r3, #10
 80016e4:	4013      	ands	r3, r2
 80016e6:	d02b      	beq.n	8001740 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_ADC_ConfigChannel+0x100>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_ADC_ConfigChannel+0x100>)
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	03c9      	lsls	r1, r1, #15
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e023      	b.n	8001740 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	035b      	lsls	r3, r3, #13
 8001704:	0b5b      	lsrs	r3, r3, #13
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	400a      	ands	r2, r1
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	02db      	lsls	r3, r3, #11
 8001718:	4013      	ands	r3, r2
 800171a:	d005      	beq.n	8001728 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_ADC_ConfigChannel+0x100>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_ADC_ConfigChannel+0x100>)
 8001722:	490e      	ldr	r1, [pc, #56]	; (800175c <HAL_ADC_ConfigChannel+0x104>)
 8001724:	400a      	ands	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	029b      	lsls	r3, r3, #10
 8001730:	4013      	ands	r3, r2
 8001732:	d005      	beq.n	8001740 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_ADC_ConfigChannel+0x100>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <HAL_ADC_ConfigChannel+0x100>)
 800173a:	4909      	ldr	r1, [pc, #36]	; (8001760 <HAL_ADC_ConfigChannel+0x108>)
 800173c:	400a      	ands	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2250      	movs	r2, #80	; 0x50
 8001744:	2100      	movs	r1, #0
 8001746:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b002      	add	sp, #8
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	00001001 	.word	0x00001001
 8001758:	40012708 	.word	0x40012708
 800175c:	ff7fffff 	.word	0xff7fffff
 8001760:	ffbfffff 	.word	0xffbfffff

08001764 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <ADC_DelayMicroSecond+0x38>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	490b      	ldr	r1, [pc, #44]	; (80017a0 <ADC_DelayMicroSecond+0x3c>)
 8001772:	0018      	movs	r0, r3
 8001774:	f7fe fcc8 	bl	8000108 <__udivsi3>
 8001778:	0003      	movs	r3, r0
 800177a:	001a      	movs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4353      	muls	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001782:	e002      	b.n	800178a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3b01      	subs	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f9      	bne.n	8001784 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	b004      	add	sp, #16
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	20000000 	.word	0x20000000
 80017a0:	000f4240 	.word	0x000f4240

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	0002      	movs	r2, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b7f      	cmp	r3, #127	; 0x7f
 80017b8:	d828      	bhi.n	800180c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ba:	4a2f      	ldr	r2, [pc, #188]	; (8001878 <__NVIC_SetPriority+0xd4>)
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	33c0      	adds	r3, #192	; 0xc0
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	589b      	ldr	r3, [r3, r2]
 80017ca:	1dfa      	adds	r2, r7, #7
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	0011      	movs	r1, r2
 80017d0:	2203      	movs	r2, #3
 80017d2:	400a      	ands	r2, r1
 80017d4:	00d2      	lsls	r2, r2, #3
 80017d6:	21ff      	movs	r1, #255	; 0xff
 80017d8:	4091      	lsls	r1, r2
 80017da:	000a      	movs	r2, r1
 80017dc:	43d2      	mvns	r2, r2
 80017de:	401a      	ands	r2, r3
 80017e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	019b      	lsls	r3, r3, #6
 80017e6:	22ff      	movs	r2, #255	; 0xff
 80017e8:	401a      	ands	r2, r3
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	0018      	movs	r0, r3
 80017f0:	2303      	movs	r3, #3
 80017f2:	4003      	ands	r3, r0
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f8:	481f      	ldr	r0, [pc, #124]	; (8001878 <__NVIC_SetPriority+0xd4>)
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	430a      	orrs	r2, r1
 8001804:	33c0      	adds	r3, #192	; 0xc0
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800180a:	e031      	b.n	8001870 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800180c:	4a1b      	ldr	r2, [pc, #108]	; (800187c <__NVIC_SetPriority+0xd8>)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	0019      	movs	r1, r3
 8001814:	230f      	movs	r3, #15
 8001816:	400b      	ands	r3, r1
 8001818:	3b08      	subs	r3, #8
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3306      	adds	r3, #6
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	18d3      	adds	r3, r2, r3
 8001822:	3304      	adds	r3, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	1dfa      	adds	r2, r7, #7
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	0011      	movs	r1, r2
 800182c:	2203      	movs	r2, #3
 800182e:	400a      	ands	r2, r1
 8001830:	00d2      	lsls	r2, r2, #3
 8001832:	21ff      	movs	r1, #255	; 0xff
 8001834:	4091      	lsls	r1, r2
 8001836:	000a      	movs	r2, r1
 8001838:	43d2      	mvns	r2, r2
 800183a:	401a      	ands	r2, r3
 800183c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	019b      	lsls	r3, r3, #6
 8001842:	22ff      	movs	r2, #255	; 0xff
 8001844:	401a      	ands	r2, r3
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	0018      	movs	r0, r3
 800184c:	2303      	movs	r3, #3
 800184e:	4003      	ands	r3, r0
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001854:	4809      	ldr	r0, [pc, #36]	; (800187c <__NVIC_SetPriority+0xd8>)
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	001c      	movs	r4, r3
 800185c:	230f      	movs	r3, #15
 800185e:	4023      	ands	r3, r4
 8001860:	3b08      	subs	r3, #8
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	430a      	orrs	r2, r1
 8001866:	3306      	adds	r3, #6
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	18c3      	adds	r3, r0, r3
 800186c:	3304      	adds	r3, #4
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b003      	add	sp, #12
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	1e5a      	subs	r2, r3, #1
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	045b      	lsls	r3, r3, #17
 8001890:	429a      	cmp	r2, r3
 8001892:	d301      	bcc.n	8001898 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001894:	2301      	movs	r3, #1
 8001896:	e010      	b.n	80018ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <SysTick_Config+0x44>)
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	3a01      	subs	r2, #1
 800189e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a0:	2301      	movs	r3, #1
 80018a2:	425b      	negs	r3, r3
 80018a4:	2103      	movs	r1, #3
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff ff7c 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SysTick_Config+0x44>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SysTick_Config+0x44>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	0018      	movs	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	b002      	add	sp, #8
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	210f      	movs	r1, #15
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	1c02      	adds	r2, r0, #0
 80018d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	0011      	movs	r1, r2
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <__NVIC_SetPriority>
}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff ffbf 	bl	8001880 <SysTick_Config>
 8001902:	0003      	movs	r3, r0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001922:	e14f      	b.n	8001bc4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4091      	lsls	r1, r2
 800192e:	000a      	movs	r2, r1
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d100      	bne.n	800193c <HAL_GPIO_Init+0x30>
 800193a:	e140      	b.n	8001bbe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2203      	movs	r2, #3
 8001942:	4013      	ands	r3, r2
 8001944:	2b01      	cmp	r3, #1
 8001946:	d005      	beq.n	8001954 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2203      	movs	r2, #3
 800194e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001950:	2b02      	cmp	r3, #2
 8001952:	d130      	bne.n	80019b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	409a      	lsls	r2, r3
 8001962:	0013      	movs	r3, r2
 8001964:	43da      	mvns	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	409a      	lsls	r2, r3
 8001976:	0013      	movs	r3, r2
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198a:	2201      	movs	r2, #1
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	43da      	mvns	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	2201      	movs	r2, #1
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2203      	movs	r2, #3
 80019bc:	4013      	ands	r3, r2
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d017      	beq.n	80019f2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	43da      	mvns	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2203      	movs	r2, #3
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d123      	bne.n	8001a46 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	58d3      	ldr	r3, [r2, r3]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2207      	movs	r2, #7
 8001a10:	4013      	ands	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	409a      	lsls	r2, r3
 8001a18:	0013      	movs	r3, r2
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2107      	movs	r1, #7
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	08da      	lsrs	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3208      	adds	r2, #8
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	6939      	ldr	r1, [r7, #16]
 8001a44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	43da      	mvns	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2203      	movs	r2, #3
 8001a64:	401a      	ands	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	23c0      	movs	r3, #192	; 0xc0
 8001a80:	029b      	lsls	r3, r3, #10
 8001a82:	4013      	ands	r3, r2
 8001a84:	d100      	bne.n	8001a88 <HAL_GPIO_Init+0x17c>
 8001a86:	e09a      	b.n	8001bbe <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a88:	4b54      	ldr	r3, [pc, #336]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a8c:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	430a      	orrs	r2, r1
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a94:	4a52      	ldr	r2, [pc, #328]	; (8001be0 <HAL_GPIO_Init+0x2d4>)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	589b      	ldr	r3, [r3, r2]
 8001aa0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	409a      	lsls	r2, r3
 8001aae:	0013      	movs	r3, r2
 8001ab0:	43da      	mvns	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	23a0      	movs	r3, #160	; 0xa0
 8001abc:	05db      	lsls	r3, r3, #23
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d019      	beq.n	8001af6 <HAL_GPIO_Init+0x1ea>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a47      	ldr	r2, [pc, #284]	; (8001be4 <HAL_GPIO_Init+0x2d8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0x1e6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a46      	ldr	r2, [pc, #280]	; (8001be8 <HAL_GPIO_Init+0x2dc>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00d      	beq.n	8001aee <HAL_GPIO_Init+0x1e2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a45      	ldr	r2, [pc, #276]	; (8001bec <HAL_GPIO_Init+0x2e0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x1de>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a44      	ldr	r2, [pc, #272]	; (8001bf0 <HAL_GPIO_Init+0x2e4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_GPIO_Init+0x1da>
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	e008      	b.n	8001af8 <HAL_GPIO_Init+0x1ec>
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x1ec>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x1ec>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x1ec>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x1ec>
 8001af6:	2300      	movs	r3, #0
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	2103      	movs	r1, #3
 8001afc:	400a      	ands	r2, r1
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b08:	4935      	ldr	r1, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x2d4>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b16:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b3a:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43da      	mvns	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	029b      	lsls	r3, r3, #10
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43da      	mvns	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	035b      	lsls	r3, r3, #13
 8001b82:	4013      	ands	r3, r2
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	039b      	lsls	r3, r3, #14
 8001bac:	4013      	ands	r3, r2
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	40da      	lsrs	r2, r3
 8001bcc:	1e13      	subs	r3, r2, #0
 8001bce:	d000      	beq.n	8001bd2 <HAL_GPIO_Init+0x2c6>
 8001bd0:	e6a8      	b.n	8001924 <HAL_GPIO_Init+0x18>
  }
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b006      	add	sp, #24
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000
 8001be4:	50000400 	.word	0x50000400
 8001be8:	50000800 	.word	0x50000800
 8001bec:	50000c00 	.word	0x50000c00
 8001bf0:	50001c00 	.word	0x50001c00
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	0008      	movs	r0, r1
 8001c02:	0011      	movs	r1, r2
 8001c04:	1cbb      	adds	r3, r7, #2
 8001c06:	1c02      	adds	r2, r0, #0
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	1c7b      	adds	r3, r7, #1
 8001c0c:	1c0a      	adds	r2, r1, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c10:	1c7b      	adds	r3, r7, #1
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c18:	1cbb      	adds	r3, r7, #2
 8001c1a:	881a      	ldrh	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c20:	e003      	b.n	8001c2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c22:	1cbb      	adds	r3, r7, #2
 8001c24:	881a      	ldrh	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b002      	add	sp, #8
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	000a      	movs	r2, r1
 8001c3c:	1cbb      	adds	r3, r7, #2
 8001c3e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c46:	1cbb      	adds	r3, r7, #2
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	041a      	lsls	r2, r3, #16
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	1cb9      	adds	r1, r7, #2
 8001c56:	8809      	ldrh	r1, [r1, #0]
 8001c58:	400b      	ands	r3, r1
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b004      	add	sp, #16
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e082      	b.n	8001d80 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2241      	movs	r2, #65	; 0x41
 8001c7e:	5c9b      	ldrb	r3, [r3, r2]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d107      	bne.n	8001c96 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2240      	movs	r2, #64	; 0x40
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff f8a1 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2241      	movs	r2, #65	; 0x41
 8001c9a:	2124      	movs	r1, #36	; 0x24
 8001c9c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	438a      	bics	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4934      	ldr	r1, [pc, #208]	; (8001d88 <HAL_I2C_Init+0x120>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4931      	ldr	r1, [pc, #196]	; (8001d8c <HAL_I2C_Init+0x124>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d108      	bne.n	8001ce6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	0209      	lsls	r1, r1, #8
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	e007      	b.n	8001cf6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2184      	movs	r1, #132	; 0x84
 8001cf0:	0209      	lsls	r1, r1, #8
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d104      	bne.n	8001d08 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	491f      	ldr	r1, [pc, #124]	; (8001d90 <HAL_I2C_Init+0x128>)
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	491a      	ldr	r1, [pc, #104]	; (8001d8c <HAL_I2C_Init+0x124>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69d9      	ldr	r1, [r3, #28]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2241      	movs	r2, #65	; 0x41
 8001d6c:	2120      	movs	r1, #32
 8001d6e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2242      	movs	r2, #66	; 0x42
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b002      	add	sp, #8
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	f0ffffff 	.word	0xf0ffffff
 8001d8c:	ffff7fff 	.word	0xffff7fff
 8001d90:	02008000 	.word	0x02008000

08001d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2241      	movs	r2, #65	; 0x41
 8001da2:	5c9b      	ldrb	r3, [r3, r2]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b20      	cmp	r3, #32
 8001da8:	d138      	bne.n	8001e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	5c9b      	ldrb	r3, [r3, r2]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e032      	b.n	8001e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2241      	movs	r2, #65	; 0x41
 8001dc4:	2124      	movs	r1, #36	; 0x24
 8001dc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4911      	ldr	r1, [pc, #68]	; (8001e28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001de4:	400a      	ands	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6819      	ldr	r1, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2101      	movs	r1, #1
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2241      	movs	r2, #65	; 0x41
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2240      	movs	r2, #64	; 0x40
 8001e14:	2100      	movs	r1, #0
 8001e16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e000      	b.n	8001e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
  }
}
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b002      	add	sp, #8
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	ffffefff 	.word	0xffffefff

08001e2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2241      	movs	r2, #65	; 0x41
 8001e3a:	5c9b      	ldrb	r3, [r3, r2]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d139      	bne.n	8001eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2240      	movs	r2, #64	; 0x40
 8001e46:	5c9b      	ldrb	r3, [r3, r2]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e033      	b.n	8001eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	2101      	movs	r1, #1
 8001e56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2241      	movs	r2, #65	; 0x41
 8001e5c:	2124      	movs	r1, #36	; 0x24
 8001e5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	438a      	bics	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2241      	movs	r2, #65	; 0x41
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2240      	movs	r2, #64	; 0x40
 8001eae:	2100      	movs	r1, #0
 8001eb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eb6:	2302      	movs	r3, #2
  }
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b004      	add	sp, #16
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	fffff0ff 	.word	0xfffff0ff

08001ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f000 fb5a 	bl	800258c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed8:	4bce      	ldr	r3, [pc, #824]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	220c      	movs	r2, #12
 8001ede:	4013      	ands	r3, r2
 8001ee0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee2:	4bcc      	ldr	r3, [pc, #816]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	025b      	lsls	r3, r3, #9
 8001eea:	4013      	ands	r3, r2
 8001eec:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d100      	bne.n	8001efa <HAL_RCC_OscConfig+0x36>
 8001ef8:	e07c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d007      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d111      	bne.n	8001f2a <HAL_RCC_OscConfig+0x66>
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	025b      	lsls	r3, r3, #9
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	4bc0      	ldr	r3, [pc, #768]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	029b      	lsls	r3, r3, #10
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <HAL_RCC_OscConfig+0x5a>
 8001f1c:	e069      	b.n	8001ff2 <HAL_RCC_OscConfig+0x12e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d165      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e330      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	025b      	lsls	r3, r3, #9
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_OscConfig+0x82>
 8001f36:	4bb7      	ldr	r3, [pc, #732]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4bb6      	ldr	r3, [pc, #728]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f3c:	2180      	movs	r1, #128	; 0x80
 8001f3e:	0249      	lsls	r1, r1, #9
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e027      	b.n	8001f96 <HAL_RCC_OscConfig+0xd2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	23a0      	movs	r3, #160	; 0xa0
 8001f4c:	02db      	lsls	r3, r3, #11
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d10e      	bne.n	8001f70 <HAL_RCC_OscConfig+0xac>
 8001f52:	4bb0      	ldr	r3, [pc, #704]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4baf      	ldr	r3, [pc, #700]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	02c9      	lsls	r1, r1, #11
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	4bac      	ldr	r3, [pc, #688]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4bab      	ldr	r3, [pc, #684]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f66:	2180      	movs	r1, #128	; 0x80
 8001f68:	0249      	lsls	r1, r1, #9
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e012      	b.n	8001f96 <HAL_RCC_OscConfig+0xd2>
 8001f70:	4ba8      	ldr	r3, [pc, #672]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4ba7      	ldr	r3, [pc, #668]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f76:	49a8      	ldr	r1, [pc, #672]	; (8002218 <HAL_RCC_OscConfig+0x354>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	4ba5      	ldr	r3, [pc, #660]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	025b      	lsls	r3, r3, #9
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4ba2      	ldr	r3, [pc, #648]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4ba1      	ldr	r3, [pc, #644]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001f90:	49a2      	ldr	r1, [pc, #648]	; (800221c <HAL_RCC_OscConfig+0x358>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d014      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff f9b9 	bl	8001314 <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff f9b4 	bl	8001314 <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e2e8      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fba:	4b96      	ldr	r3, [pc, #600]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	029b      	lsls	r3, r3, #10
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xe4>
 8001fc6:	e015      	b.n	8001ff4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f9a4 	bl	8001314 <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd2:	f7ff f99f 	bl	8001314 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	; 0x64
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e2d3      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fe4:	4b8b      	ldr	r3, [pc, #556]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	4013      	ands	r3, r2
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x10e>
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d100      	bne.n	8002000 <HAL_RCC_OscConfig+0x13c>
 8001ffe:	e08b      	b.n	8002118 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	2b04      	cmp	r3, #4
 800200a:	d005      	beq.n	8002018 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d13e      	bne.n	8002090 <HAL_RCC_OscConfig+0x1cc>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d13b      	bne.n	8002090 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002018:	4b7e      	ldr	r3, [pc, #504]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2204      	movs	r2, #4
 800201e:	4013      	ands	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_RCC_OscConfig+0x168>
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e2af      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202c:	4b79      	ldr	r3, [pc, #484]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a7b      	ldr	r2, [pc, #492]	; (8002220 <HAL_RCC_OscConfig+0x35c>)
 8002032:	4013      	ands	r3, r2
 8002034:	0019      	movs	r1, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	021a      	lsls	r2, r3, #8
 800203c:	4b75      	ldr	r3, [pc, #468]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002042:	4b74      	ldr	r3, [pc, #464]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2209      	movs	r2, #9
 8002048:	4393      	bics	r3, r2
 800204a:	0019      	movs	r1, r3
 800204c:	4b71      	ldr	r3, [pc, #452]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002054:	f000 fbe8 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8002058:	0001      	movs	r1, r0
 800205a:	4b6e      	ldr	r3, [pc, #440]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	220f      	movs	r2, #15
 8002062:	4013      	ands	r3, r2
 8002064:	4a6f      	ldr	r2, [pc, #444]	; (8002224 <HAL_RCC_OscConfig+0x360>)
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	000a      	movs	r2, r1
 800206a:	40da      	lsrs	r2, r3
 800206c:	4b6e      	ldr	r3, [pc, #440]	; (8002228 <HAL_RCC_OscConfig+0x364>)
 800206e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002070:	4b6e      	ldr	r3, [pc, #440]	; (800222c <HAL_RCC_OscConfig+0x368>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2513      	movs	r5, #19
 8002076:	197c      	adds	r4, r7, r5
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff f905 	bl	8001288 <HAL_InitTick>
 800207e:	0003      	movs	r3, r0
 8002080:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002082:	197b      	adds	r3, r7, r5
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d046      	beq.n	8002118 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 800208a:	197b      	adds	r3, r7, r5
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	e27d      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d027      	beq.n	80020e6 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002096:	4b5f      	ldr	r3, [pc, #380]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2209      	movs	r2, #9
 800209c:	4393      	bics	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	4b5c      	ldr	r3, [pc, #368]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff f934 	bl	8001314 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b2:	f7ff f92f 	bl	8001314 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e263      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020c4:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2204      	movs	r2, #4
 80020ca:	4013      	ands	r3, r2
 80020cc:	d0f1      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b51      	ldr	r3, [pc, #324]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a53      	ldr	r2, [pc, #332]	; (8002220 <HAL_RCC_OscConfig+0x35c>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	021a      	lsls	r2, r3, #8
 80020de:	4b4d      	ldr	r3, [pc, #308]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	e018      	b.n	8002118 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e6:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	438a      	bics	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7ff f90f 	bl	8001314 <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fc:	f7ff f90a 	bl	8001314 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e23e      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2204      	movs	r2, #4
 8002114:	4013      	ands	r3, r2
 8002116:	d1f1      	bne.n	80020fc <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2210      	movs	r2, #16
 800211e:	4013      	ands	r3, r2
 8002120:	d100      	bne.n	8002124 <HAL_RCC_OscConfig+0x260>
 8002122:	e0a1      	b.n	8002268 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d140      	bne.n	80021ac <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4013      	ands	r3, r2
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x27e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e224      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002142:	4b34      	ldr	r3, [pc, #208]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4a3a      	ldr	r2, [pc, #232]	; (8002230 <HAL_RCC_OscConfig+0x36c>)
 8002148:	4013      	ands	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	0a19      	lsrs	r1, r3, #8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	061a      	lsls	r2, r3, #24
 8002164:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	0b5b      	lsrs	r3, r3, #13
 8002170:	3301      	adds	r3, #1
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	0212      	lsls	r2, r2, #8
 8002176:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002178:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	210f      	movs	r1, #15
 8002180:	400b      	ands	r3, r1
 8002182:	4928      	ldr	r1, [pc, #160]	; (8002224 <HAL_RCC_OscConfig+0x360>)
 8002184:	5ccb      	ldrb	r3, [r1, r3]
 8002186:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_OscConfig+0x364>)
 800218a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <HAL_RCC_OscConfig+0x368>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2513      	movs	r5, #19
 8002192:	197c      	adds	r4, r7, r5
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff f877 	bl	8001288 <HAL_InitTick>
 800219a:	0003      	movs	r3, r0
 800219c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800219e:	197b      	adds	r3, r7, r5
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d060      	beq.n	8002268 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 80021a6:	197b      	adds	r3, r7, r5
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	e1ef      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d03f      	beq.n	8002234 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 80021ba:	2180      	movs	r1, #128	; 0x80
 80021bc:	0049      	lsls	r1, r1, #1
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7ff f8a7 	bl	8001314 <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021cc:	f7ff f8a2 	bl	8001314 <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1d6      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4013      	ands	r3, r2
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4a10      	ldr	r2, [pc, #64]	; (8002230 <HAL_RCC_OscConfig+0x36c>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	0a19      	lsrs	r1, r3, #8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	061a      	lsls	r2, r3, #24
 800220c:	4b01      	ldr	r3, [pc, #4]	; (8002214 <HAL_RCC_OscConfig+0x350>)
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	e029      	b.n	8002268 <HAL_RCC_OscConfig+0x3a4>
 8002214:	40021000 	.word	0x40021000
 8002218:	fffeffff 	.word	0xfffeffff
 800221c:	fffbffff 	.word	0xfffbffff
 8002220:	ffffe0ff 	.word	0xffffe0ff
 8002224:	080040b8 	.word	0x080040b8
 8002228:	20000000 	.word	0x20000000
 800222c:	20000004 	.word	0x20000004
 8002230:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002234:	4bbe      	ldr	r3, [pc, #760]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4bbd      	ldr	r3, [pc, #756]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 800223a:	49be      	ldr	r1, [pc, #760]	; (8002534 <HAL_RCC_OscConfig+0x670>)
 800223c:	400a      	ands	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff f868 	bl	8001314 <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800224a:	f7ff f863 	bl	8001314 <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e197      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800225c:	4bb4      	ldr	r3, [pc, #720]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4013      	ands	r3, r2
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2208      	movs	r2, #8
 800226e:	4013      	ands	r3, r2
 8002270:	d036      	beq.n	80022e0 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d019      	beq.n	80022ae <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	4bad      	ldr	r3, [pc, #692]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 800227c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800227e:	4bac      	ldr	r3, [pc, #688]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002280:	2101      	movs	r1, #1
 8002282:	430a      	orrs	r2, r1
 8002284:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7ff f845 	bl	8001314 <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002290:	f7ff f840 	bl	8001314 <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e174      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022a2:	4ba3      	ldr	r3, [pc, #652]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d0f1      	beq.n	8002290 <HAL_RCC_OscConfig+0x3cc>
 80022ac:	e018      	b.n	80022e0 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ae:	4ba0      	ldr	r3, [pc, #640]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80022b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022b2:	4b9f      	ldr	r3, [pc, #636]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	438a      	bics	r2, r1
 80022b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ba:	f7ff f82b 	bl	8001314 <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff f826 	bl	8001314 <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e15a      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022d6:	4b96      	ldr	r3, [pc, #600]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80022d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022da:	2202      	movs	r2, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	d1f1      	bne.n	80022c4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2204      	movs	r2, #4
 80022e6:	4013      	ands	r3, r2
 80022e8:	d100      	bne.n	80022ec <HAL_RCC_OscConfig+0x428>
 80022ea:	e0ae      	b.n	800244a <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ec:	2027      	movs	r0, #39	; 0x27
 80022ee:	183b      	adds	r3, r7, r0
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f4:	4b8e      	ldr	r3, [pc, #568]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80022f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	055b      	lsls	r3, r3, #21
 80022fc:	4013      	ands	r3, r2
 80022fe:	d109      	bne.n	8002314 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002300:	4b8b      	ldr	r3, [pc, #556]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002304:	4b8a      	ldr	r3, [pc, #552]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002306:	2180      	movs	r1, #128	; 0x80
 8002308:	0549      	lsls	r1, r1, #21
 800230a:	430a      	orrs	r2, r1
 800230c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800230e:	183b      	adds	r3, r7, r0
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b88      	ldr	r3, [pc, #544]	; (8002538 <HAL_RCC_OscConfig+0x674>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4013      	ands	r3, r2
 800231e:	d11a      	bne.n	8002356 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002320:	4b85      	ldr	r3, [pc, #532]	; (8002538 <HAL_RCC_OscConfig+0x674>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b84      	ldr	r3, [pc, #528]	; (8002538 <HAL_RCC_OscConfig+0x674>)
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	0049      	lsls	r1, r1, #1
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7fe fff1 	bl	8001314 <HAL_GetTick>
 8002332:	0003      	movs	r3, r0
 8002334:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7fe ffec 	bl	8001314 <HAL_GetTick>
 800233c:	0002      	movs	r2, r0
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e120      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b7b      	ldr	r3, [pc, #492]	; (8002538 <HAL_RCC_OscConfig+0x674>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4013      	ands	r3, r2
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	429a      	cmp	r2, r3
 8002360:	d107      	bne.n	8002372 <HAL_RCC_OscConfig+0x4ae>
 8002362:	4b73      	ldr	r3, [pc, #460]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002366:	4b72      	ldr	r3, [pc, #456]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0049      	lsls	r1, r1, #1
 800236c:	430a      	orrs	r2, r1
 800236e:	651a      	str	r2, [r3, #80]	; 0x50
 8002370:	e031      	b.n	80023d6 <HAL_RCC_OscConfig+0x512>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x4d0>
 800237a:	4b6d      	ldr	r3, [pc, #436]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 800237c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800237e:	4b6c      	ldr	r3, [pc, #432]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002380:	496c      	ldr	r1, [pc, #432]	; (8002534 <HAL_RCC_OscConfig+0x670>)
 8002382:	400a      	ands	r2, r1
 8002384:	651a      	str	r2, [r3, #80]	; 0x50
 8002386:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800238a:	4b69      	ldr	r3, [pc, #420]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 800238c:	496b      	ldr	r1, [pc, #428]	; (800253c <HAL_RCC_OscConfig+0x678>)
 800238e:	400a      	ands	r2, r1
 8002390:	651a      	str	r2, [r3, #80]	; 0x50
 8002392:	e020      	b.n	80023d6 <HAL_RCC_OscConfig+0x512>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	23a0      	movs	r3, #160	; 0xa0
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	429a      	cmp	r2, r3
 800239e:	d10e      	bne.n	80023be <HAL_RCC_OscConfig+0x4fa>
 80023a0:	4b63      	ldr	r3, [pc, #396]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80023a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023a4:	4b62      	ldr	r3, [pc, #392]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	00c9      	lsls	r1, r1, #3
 80023aa:	430a      	orrs	r2, r1
 80023ac:	651a      	str	r2, [r3, #80]	; 0x50
 80023ae:	4b60      	ldr	r3, [pc, #384]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80023b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023b2:	4b5f      	ldr	r3, [pc, #380]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	0049      	lsls	r1, r1, #1
 80023b8:	430a      	orrs	r2, r1
 80023ba:	651a      	str	r2, [r3, #80]	; 0x50
 80023bc:	e00b      	b.n	80023d6 <HAL_RCC_OscConfig+0x512>
 80023be:	4b5c      	ldr	r3, [pc, #368]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80023c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023c2:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80023c4:	495b      	ldr	r1, [pc, #364]	; (8002534 <HAL_RCC_OscConfig+0x670>)
 80023c6:	400a      	ands	r2, r1
 80023c8:	651a      	str	r2, [r3, #80]	; 0x50
 80023ca:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80023cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023ce:	4b58      	ldr	r3, [pc, #352]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80023d0:	495a      	ldr	r1, [pc, #360]	; (800253c <HAL_RCC_OscConfig+0x678>)
 80023d2:	400a      	ands	r2, r1
 80023d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d015      	beq.n	800240a <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7fe ff99 	bl	8001314 <HAL_GetTick>
 80023e2:	0003      	movs	r3, r0
 80023e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023e6:	e009      	b.n	80023fc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e8:	f7fe ff94 	bl	8001314 <HAL_GetTick>
 80023ec:	0002      	movs	r2, r0
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	4a53      	ldr	r2, [pc, #332]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0c7      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023fc:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80023fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4013      	ands	r3, r2
 8002406:	d0ef      	beq.n	80023e8 <HAL_RCC_OscConfig+0x524>
 8002408:	e014      	b.n	8002434 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7fe ff83 	bl	8001314 <HAL_GetTick>
 800240e:	0003      	movs	r3, r0
 8002410:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002412:	e009      	b.n	8002428 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe ff7e 	bl	8001314 <HAL_GetTick>
 8002418:	0002      	movs	r2, r0
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	4a48      	ldr	r2, [pc, #288]	; (8002540 <HAL_RCC_OscConfig+0x67c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0b1      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002428:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 800242a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4013      	ands	r3, r2
 8002432:	d1ef      	bne.n	8002414 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002434:	2327      	movs	r3, #39	; 0x27
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d105      	bne.n	800244a <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243e:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002444:	493f      	ldr	r1, [pc, #252]	; (8002544 <HAL_RCC_OscConfig+0x680>)
 8002446:	400a      	ands	r2, r1
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	2b00      	cmp	r3, #0
 8002450:	d100      	bne.n	8002454 <HAL_RCC_OscConfig+0x590>
 8002452:	e09a      	b.n	800258a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d064      	beq.n	8002524 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2b02      	cmp	r3, #2
 8002460:	d145      	bne.n	80024ee <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	4b33      	ldr	r3, [pc, #204]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002468:	4937      	ldr	r1, [pc, #220]	; (8002548 <HAL_RCC_OscConfig+0x684>)
 800246a:	400a      	ands	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe ff51 	bl	8001314 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe ff4c 	bl	8001314 <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e080      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800248a:	4b29      	ldr	r3, [pc, #164]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	049b      	lsls	r3, r3, #18
 8002492:	4013      	ands	r3, r2
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4a2c      	ldr	r2, [pc, #176]	; (800254c <HAL_RCC_OscConfig+0x688>)
 800249c:	4013      	ands	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	431a      	orrs	r2, r3
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80024b2:	430a      	orrs	r2, r1
 80024b4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	0449      	lsls	r1, r1, #17
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe ff26 	bl	8001314 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe ff21 	bl	8001314 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e055      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	049b      	lsls	r3, r3, #18
 80024e8:	4013      	ands	r3, r2
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x60a>
 80024ec:	e04d      	b.n	800258a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 80024f4:	4914      	ldr	r1, [pc, #80]	; (8002548 <HAL_RCC_OscConfig+0x684>)
 80024f6:	400a      	ands	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7fe ff0b 	bl	8001314 <HAL_GetTick>
 80024fe:	0003      	movs	r3, r0
 8002500:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe ff06 	bl	8001314 <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e03a      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_RCC_OscConfig+0x66c>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	049b      	lsls	r3, r3, #18
 800251e:	4013      	ands	r3, r2
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x640>
 8002522:	e032      	b.n	800258a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	2b01      	cmp	r3, #1
 800252a:	d111      	bne.n	8002550 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e02d      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
 8002530:	40021000 	.word	0x40021000
 8002534:	fffffeff 	.word	0xfffffeff
 8002538:	40007000 	.word	0x40007000
 800253c:	fffffbff 	.word	0xfffffbff
 8002540:	00001388 	.word	0x00001388
 8002544:	efffffff 	.word	0xefffffff
 8002548:	feffffff 	.word	0xfeffffff
 800254c:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002550:	4b10      	ldr	r3, [pc, #64]	; (8002594 <HAL_RCC_OscConfig+0x6d0>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	401a      	ands	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	429a      	cmp	r2, r3
 8002564:	d10f      	bne.n	8002586 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	23f0      	movs	r3, #240	; 0xf0
 800256a:	039b      	lsls	r3, r3, #14
 800256c:	401a      	ands	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d107      	bne.n	8002586 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	23c0      	movs	r3, #192	; 0xc0
 800257a:	041b      	lsls	r3, r3, #16
 800257c:	401a      	ands	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b00a      	add	sp, #40	; 0x28
 8002592:	bdb0      	pop	{r4, r5, r7, pc}
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002598:	b5b0      	push	{r4, r5, r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e128      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b96      	ldr	r3, [pc, #600]	; (8002808 <HAL_RCC_ClockConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2201      	movs	r2, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d91e      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b93      	ldr	r3, [pc, #588]	; (8002808 <HAL_RCC_ClockConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2201      	movs	r2, #1
 80025c0:	4393      	bics	r3, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	4b90      	ldr	r3, [pc, #576]	; (8002808 <HAL_RCC_ClockConfig+0x270>)
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025cc:	f7fe fea2 	bl	8001314 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d4:	e009      	b.n	80025ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d6:	f7fe fe9d 	bl	8001314 <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	4a8a      	ldr	r2, [pc, #552]	; (800280c <HAL_RCC_ClockConfig+0x274>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e109      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b87      	ldr	r3, [pc, #540]	; (8002808 <HAL_RCC_ClockConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2201      	movs	r2, #1
 80025f0:	4013      	ands	r3, r2
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d1ee      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2202      	movs	r2, #2
 80025fe:	4013      	ands	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002602:	4b83      	ldr	r3, [pc, #524]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	22f0      	movs	r2, #240	; 0xf0
 8002608:	4393      	bics	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	4b7f      	ldr	r3, [pc, #508]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 8002612:	430a      	orrs	r2, r1
 8002614:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2201      	movs	r2, #1
 800261c:	4013      	ands	r3, r2
 800261e:	d100      	bne.n	8002622 <HAL_RCC_ClockConfig+0x8a>
 8002620:	e089      	b.n	8002736 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800262a:	4b79      	ldr	r3, [pc, #484]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	4013      	ands	r3, r2
 8002634:	d120      	bne.n	8002678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0e1      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002642:	4b73      	ldr	r3, [pc, #460]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	049b      	lsls	r3, r3, #18
 800264a:	4013      	ands	r3, r2
 800264c:	d114      	bne.n	8002678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0d5      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d106      	bne.n	8002668 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265a:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2204      	movs	r2, #4
 8002660:	4013      	ands	r3, r2
 8002662:	d109      	bne.n	8002678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0ca      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002668:	4b69      	ldr	r3, [pc, #420]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4013      	ands	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0c2      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002678:	4b65      	ldr	r3, [pc, #404]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2203      	movs	r2, #3
 800267e:	4393      	bics	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4b62      	ldr	r3, [pc, #392]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 8002688:	430a      	orrs	r2, r1
 800268a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800268c:	f7fe fe42 	bl	8001314 <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d111      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800269c:	e009      	b.n	80026b2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269e:	f7fe fe39 	bl	8001314 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_RCC_ClockConfig+0x274>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0a5      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026b2:	4b57      	ldr	r3, [pc, #348]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	220c      	movs	r2, #12
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d1ef      	bne.n	800269e <HAL_RCC_ClockConfig+0x106>
 80026be:	e03a      	b.n	8002736 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d111      	bne.n	80026ec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c8:	e009      	b.n	80026de <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ca:	f7fe fe23 	bl	8001314 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	4a4d      	ldr	r2, [pc, #308]	; (800280c <HAL_RCC_ClockConfig+0x274>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e08f      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026de:	4b4c      	ldr	r3, [pc, #304]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	220c      	movs	r2, #12
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d1ef      	bne.n	80026ca <HAL_RCC_ClockConfig+0x132>
 80026ea:	e024      	b.n	8002736 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d11b      	bne.n	800272c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026f4:	e009      	b.n	800270a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f6:	f7fe fe0d 	bl	8001314 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	4a42      	ldr	r2, [pc, #264]	; (800280c <HAL_RCC_ClockConfig+0x274>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e079      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	220c      	movs	r2, #12
 8002710:	4013      	ands	r3, r2
 8002712:	2b04      	cmp	r3, #4
 8002714:	d1ef      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x15e>
 8002716:	e00e      	b.n	8002736 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7fe fdfc 	bl	8001314 <HAL_GetTick>
 800271c:	0002      	movs	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	4a3a      	ldr	r2, [pc, #232]	; (800280c <HAL_RCC_ClockConfig+0x274>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e068      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800272c:	4b38      	ldr	r3, [pc, #224]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	220c      	movs	r2, #12
 8002732:	4013      	ands	r3, r2
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002736:	4b34      	ldr	r3, [pc, #208]	; (8002808 <HAL_RCC_ClockConfig+0x270>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2201      	movs	r2, #1
 800273c:	4013      	ands	r3, r2
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d21e      	bcs.n	8002782 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002744:	4b30      	ldr	r3, [pc, #192]	; (8002808 <HAL_RCC_ClockConfig+0x270>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	4393      	bics	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <HAL_RCC_ClockConfig+0x270>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002756:	f7fe fddd 	bl	8001314 <HAL_GetTick>
 800275a:	0003      	movs	r3, r0
 800275c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	e009      	b.n	8002774 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fe fdd8 	bl	8001314 <HAL_GetTick>
 8002764:	0002      	movs	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	4a28      	ldr	r2, [pc, #160]	; (800280c <HAL_RCC_ClockConfig+0x274>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e044      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002774:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_ClockConfig+0x270>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2201      	movs	r2, #1
 800277a:	4013      	ands	r3, r2
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d1ee      	bne.n	8002760 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2204      	movs	r2, #4
 8002788:	4013      	ands	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a20      	ldr	r2, [pc, #128]	; (8002814 <HAL_RCC_ClockConfig+0x27c>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 800279c:	430a      	orrs	r2, r1
 800279e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2208      	movs	r2, #8
 80027a6:	4013      	ands	r3, r2
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <HAL_RCC_ClockConfig+0x280>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	00da      	lsls	r2, r3, #3
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027c0:	f000 f832 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80027c4:	0001      	movs	r1, r0
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_ClockConfig+0x278>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	220f      	movs	r2, #15
 80027ce:	4013      	ands	r3, r2
 80027d0:	4a12      	ldr	r2, [pc, #72]	; (800281c <HAL_RCC_ClockConfig+0x284>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	000a      	movs	r2, r1
 80027d6:	40da      	lsrs	r2, r3
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <HAL_RCC_ClockConfig+0x288>)
 80027da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_RCC_ClockConfig+0x28c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	250b      	movs	r5, #11
 80027e2:	197c      	adds	r4, r7, r5
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fe fd4f 	bl	8001288 <HAL_InitTick>
 80027ea:	0003      	movs	r3, r0
 80027ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80027ee:	197b      	adds	r3, r7, r5
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80027f6:	197b      	adds	r3, r7, r5
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	e000      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bdb0      	pop	{r4, r5, r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	40022000 	.word	0x40022000
 800280c:	00001388 	.word	0x00001388
 8002810:	40021000 	.word	0x40021000
 8002814:	fffff8ff 	.word	0xfffff8ff
 8002818:	ffffc7ff 	.word	0xffffc7ff
 800281c:	080040b8 	.word	0x080040b8
 8002820:	20000000 	.word	0x20000000
 8002824:	20000004 	.word	0x20000004

08002828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b08e      	sub	sp, #56	; 0x38
 800282c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800282e:	4b4c      	ldr	r3, [pc, #304]	; (8002960 <HAL_RCC_GetSysClockFreq+0x138>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002836:	230c      	movs	r3, #12
 8002838:	4013      	ands	r3, r2
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d014      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x40>
 800283e:	d900      	bls.n	8002842 <HAL_RCC_GetSysClockFreq+0x1a>
 8002840:	e07b      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x112>
 8002842:	2b04      	cmp	r3, #4
 8002844:	d002      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x24>
 8002846:	2b08      	cmp	r3, #8
 8002848:	d00b      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x3a>
 800284a:	e076      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800284c:	4b44      	ldr	r3, [pc, #272]	; (8002960 <HAL_RCC_GetSysClockFreq+0x138>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2210      	movs	r2, #16
 8002852:	4013      	ands	r3, r2
 8002854:	d002      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002856:	4b43      	ldr	r3, [pc, #268]	; (8002964 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002858:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800285a:	e07c      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800285c:	4b42      	ldr	r3, [pc, #264]	; (8002968 <HAL_RCC_GetSysClockFreq+0x140>)
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002860:	e079      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002862:	4b42      	ldr	r3, [pc, #264]	; (800296c <HAL_RCC_GetSysClockFreq+0x144>)
 8002864:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002866:	e076      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	0c9a      	lsrs	r2, r3, #18
 800286c:	230f      	movs	r3, #15
 800286e:	401a      	ands	r2, r3
 8002870:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <HAL_RCC_GetSysClockFreq+0x148>)
 8002872:	5c9b      	ldrb	r3, [r3, r2]
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	0d9a      	lsrs	r2, r3, #22
 800287a:	2303      	movs	r3, #3
 800287c:	4013      	ands	r3, r2
 800287e:	3301      	adds	r3, #1
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <HAL_RCC_GetSysClockFreq+0x138>)
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	025b      	lsls	r3, r3, #9
 800288a:	4013      	ands	r3, r2
 800288c:	d01a      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	4a35      	ldr	r2, [pc, #212]	; (800296c <HAL_RCC_GetSysClockFreq+0x144>)
 8002898:	2300      	movs	r3, #0
 800289a:	69b8      	ldr	r0, [r7, #24]
 800289c:	69f9      	ldr	r1, [r7, #28]
 800289e:	f7fd fcdf 	bl	8000260 <__aeabi_lmul>
 80028a2:	0002      	movs	r2, r0
 80028a4:	000b      	movs	r3, r1
 80028a6:	0010      	movs	r0, r2
 80028a8:	0019      	movs	r1, r3
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f7fd fcb3 	bl	8000220 <__aeabi_uldivmod>
 80028ba:	0002      	movs	r2, r0
 80028bc:	000b      	movs	r3, r1
 80028be:	0013      	movs	r3, r2
 80028c0:	637b      	str	r3, [r7, #52]	; 0x34
 80028c2:	e037      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_RCC_GetSysClockFreq+0x138>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2210      	movs	r2, #16
 80028ca:	4013      	ands	r3, r2
 80028cc:	d01a      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4a23      	ldr	r2, [pc, #140]	; (8002964 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028d8:	2300      	movs	r3, #0
 80028da:	68b8      	ldr	r0, [r7, #8]
 80028dc:	68f9      	ldr	r1, [r7, #12]
 80028de:	f7fd fcbf 	bl	8000260 <__aeabi_lmul>
 80028e2:	0002      	movs	r2, r0
 80028e4:	000b      	movs	r3, r1
 80028e6:	0010      	movs	r0, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f7fd fc93 	bl	8000220 <__aeabi_uldivmod>
 80028fa:	0002      	movs	r2, r0
 80028fc:	000b      	movs	r3, r1
 80028fe:	0013      	movs	r3, r2
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
 8002902:	e017      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	0018      	movs	r0, r3
 8002908:	2300      	movs	r3, #0
 800290a:	0019      	movs	r1, r3
 800290c:	4a16      	ldr	r2, [pc, #88]	; (8002968 <HAL_RCC_GetSysClockFreq+0x140>)
 800290e:	2300      	movs	r3, #0
 8002910:	f7fd fca6 	bl	8000260 <__aeabi_lmul>
 8002914:	0002      	movs	r2, r0
 8002916:	000b      	movs	r3, r1
 8002918:	0010      	movs	r0, r2
 800291a:	0019      	movs	r1, r3
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	001c      	movs	r4, r3
 8002920:	2300      	movs	r3, #0
 8002922:	001d      	movs	r5, r3
 8002924:	0022      	movs	r2, r4
 8002926:	002b      	movs	r3, r5
 8002928:	f7fd fc7a 	bl	8000220 <__aeabi_uldivmod>
 800292c:	0002      	movs	r2, r0
 800292e:	000b      	movs	r3, r1
 8002930:	0013      	movs	r3, r2
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002938:	e00d      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_GetSysClockFreq+0x138>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0b5b      	lsrs	r3, r3, #13
 8002940:	2207      	movs	r2, #7
 8002942:	4013      	ands	r3, r2
 8002944:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	3301      	adds	r3, #1
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	0212      	lsls	r2, r2, #8
 800294e:	409a      	lsls	r2, r3
 8002950:	0013      	movs	r3, r2
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002954:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b00e      	add	sp, #56	; 0x38
 800295e:	bdb0      	pop	{r4, r5, r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	003d0900 	.word	0x003d0900
 8002968:	00f42400 	.word	0x00f42400
 800296c:	007a1200 	.word	0x007a1200
 8002970:	080040d0 	.word	0x080040d0

08002974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b02      	ldr	r3, [pc, #8]	; (8002984 <HAL_RCC_GetHCLKFreq+0x10>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	20000000 	.word	0x20000000

08002988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800298c:	f7ff fff2 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002990:	0001      	movs	r1, r0
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	2207      	movs	r2, #7
 800299a:	4013      	ands	r3, r2
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	40d9      	lsrs	r1, r3
 80029a2:	000b      	movs	r3, r1
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	40021000 	.word	0x40021000
 80029b0:	080040c8 	.word	0x080040c8

080029b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b8:	f7ff ffdc 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80029bc:	0001      	movs	r1, r0
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	0adb      	lsrs	r3, r3, #11
 80029c4:	2207      	movs	r2, #7
 80029c6:	4013      	ands	r3, r2
 80029c8:	4a04      	ldr	r2, [pc, #16]	; (80029dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	40d9      	lsrs	r1, r3
 80029ce:	000b      	movs	r3, r1
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	40021000 	.word	0x40021000
 80029dc:	080040c8 	.word	0x080040c8

080029e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80029e8:	2017      	movs	r0, #23
 80029ea:	183b      	adds	r3, r7, r0
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2220      	movs	r2, #32
 80029f6:	4013      	ands	r3, r2
 80029f8:	d100      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80029fa:	e0c2      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fc:	4b89      	ldr	r3, [pc, #548]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	055b      	lsls	r3, r3, #21
 8002a04:	4013      	ands	r3, r2
 8002a06:	d109      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b86      	ldr	r3, [pc, #536]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a0c:	4b85      	ldr	r3, [pc, #532]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	0549      	lsls	r1, r1, #21
 8002a12:	430a      	orrs	r2, r1
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	4b82      	ldr	r3, [pc, #520]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4013      	ands	r3, r2
 8002a26:	d11a      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a28:	4b7f      	ldr	r3, [pc, #508]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b7e      	ldr	r3, [pc, #504]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	0049      	lsls	r1, r1, #1
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a36:	f7fe fc6d 	bl	8001314 <HAL_GetTick>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3e:	e008      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a40:	f7fe fc68 	bl	8001314 <HAL_GetTick>
 8002a44:	0002      	movs	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0e3      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b75      	ldr	r3, [pc, #468]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a5e:	4b71      	ldr	r3, [pc, #452]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	23c0      	movs	r3, #192	; 0xc0
 8002a64:	039b      	lsls	r3, r3, #14
 8002a66:	4013      	ands	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	23c0      	movs	r3, #192	; 0xc0
 8002a70:	039b      	lsls	r3, r3, #14
 8002a72:	4013      	ands	r3, r2
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d013      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	23c0      	movs	r3, #192	; 0xc0
 8002a80:	029b      	lsls	r3, r3, #10
 8002a82:	401a      	ands	r2, r3
 8002a84:	23c0      	movs	r3, #192	; 0xc0
 8002a86:	029b      	lsls	r3, r3, #10
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d10a      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a8c:	4b65      	ldr	r3, [pc, #404]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	029b      	lsls	r3, r3, #10
 8002a94:	401a      	ands	r2, r3
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	029b      	lsls	r3, r3, #10
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0bb      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002aa2:	4b60      	ldr	r3, [pc, #384]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002aa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aa6:	23c0      	movs	r3, #192	; 0xc0
 8002aa8:	029b      	lsls	r3, r3, #10
 8002aaa:	4013      	ands	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d03b      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	23c0      	movs	r3, #192	; 0xc0
 8002aba:	029b      	lsls	r3, r3, #10
 8002abc:	4013      	ands	r3, r2
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d033      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	4013      	ands	r3, r2
 8002acc:	d02e      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002ace:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad2:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ad8:	4b52      	ldr	r3, [pc, #328]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002adc:	4b51      	ldr	r3, [pc, #324]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	0309      	lsls	r1, r1, #12
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae6:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aea:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002aec:	4950      	ldr	r1, [pc, #320]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002aee:	400a      	ands	r2, r1
 8002af0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002af2:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	d014      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe fc07 	bl	8001314 <HAL_GetTick>
 8002b06:	0003      	movs	r3, r0
 8002b08:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b0a:	e009      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fc02 	bl	8001314 <HAL_GetTick>
 8002b10:	0002      	movs	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	4a47      	ldr	r2, [pc, #284]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e07c      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b20:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d0ef      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	23c0      	movs	r3, #192	; 0xc0
 8002b32:	029b      	lsls	r3, r3, #10
 8002b34:	401a      	ands	r2, r3
 8002b36:	23c0      	movs	r3, #192	; 0xc0
 8002b38:	029b      	lsls	r3, r3, #10
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a3d      	ldr	r2, [pc, #244]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	0019      	movs	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	23c0      	movs	r3, #192	; 0xc0
 8002b4e:	039b      	lsls	r3, r3, #14
 8002b50:	401a      	ands	r2, r3
 8002b52:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b5a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	23c0      	movs	r3, #192	; 0xc0
 8002b62:	029b      	lsls	r3, r3, #10
 8002b64:	401a      	ands	r2, r3
 8002b66:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b6c:	2317      	movs	r3, #23
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d105      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b76:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b7c:	492f      	ldr	r1, [pc, #188]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b7e:	400a      	ands	r2, r1
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2201      	movs	r2, #1
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d009      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	2203      	movs	r2, #3
 8002b92:	4393      	bics	r3, r2
 8002b94:	0019      	movs	r1, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d009      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bae:	220c      	movs	r2, #12
 8002bb0:	4393      	bics	r3, r2
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2208      	movs	r2, #8
 8002be2:	4013      	ands	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2280      	movs	r2, #128	; 0x80
 8002c00:	4013      	ands	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c04:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c14:	430a      	orrs	r2, r1
 8002c16:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b006      	add	sp, #24
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	fffcffff 	.word	0xfffcffff
 8002c30:	fff7ffff 	.word	0xfff7ffff
 8002c34:	00001388 	.word	0x00001388
 8002c38:	ffcfffff 	.word	0xffcfffff
 8002c3c:	efffffff 	.word	0xefffffff
 8002c40:	fffff3ff 	.word	0xfffff3ff
 8002c44:	ffffcfff 	.word	0xffffcfff
 8002c48:	fff3ffff 	.word	0xfff3ffff

08002c4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e08e      	b.n	8002d7c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2221      	movs	r2, #33	; 0x21
 8002c62:	5c9b      	ldrb	r3, [r3, r2]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d107      	bne.n	8002c7a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7fe f939 	bl	8000eec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2221      	movs	r2, #33	; 0x21
 8002c7e:	2102      	movs	r1, #2
 8002c80:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	22ca      	movs	r2, #202	; 0xca
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2253      	movs	r2, #83	; 0x53
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 fa10 	bl	80030ba <RTC_EnterInitMode>
 8002c9a:	1e03      	subs	r3, r0, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	22ff      	movs	r2, #255	; 0xff
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2221      	movs	r2, #33	; 0x21
 8002caa:	2104      	movs	r1, #4
 8002cac:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e064      	b.n	8002d7c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4931      	ldr	r1, [pc, #196]	; (8002d84 <HAL_RTC_Init+0x138>)
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68d2      	ldr	r2, [r2, #12]
 8002ce8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6919      	ldr	r1, [r3, #16]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	041a      	lsls	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	438a      	bics	r2, r1
 8002d0c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2103      	movs	r1, #3
 8002d1a:	438a      	bics	r2, r1
 8002d1c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d113      	bne.n	8002d6a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f000 f991 	bl	800306c <HAL_RTC_WaitForSynchro>
 8002d4a:	1e03      	subs	r3, r0, #0
 8002d4c:	d00d      	beq.n	8002d6a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	22ff      	movs	r2, #255	; 0xff
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2221      	movs	r2, #33	; 0x21
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	2100      	movs	r1, #0
 8002d64:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e008      	b.n	8002d7c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	22ff      	movs	r2, #255	; 0xff
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2221      	movs	r2, #33	; 0x21
 8002d76:	2101      	movs	r1, #1
 8002d78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
  }
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	ff8fffbf 	.word	0xff8fffbf

08002d88 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	5c9b      	ldrb	r3, [r3, r2]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_RTC_SetTime+0x1a>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0ad      	b.n	8002efe <HAL_RTC_SetTime+0x176>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	2101      	movs	r1, #1
 8002da8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2221      	movs	r2, #33	; 0x21
 8002dae:	2102      	movs	r1, #2
 8002db0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d125      	bne.n	8002e04 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2240      	movs	r2, #64	; 0x40
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d102      	bne.n	8002dca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 f99d 	bl	800310e <RTC_ByteToBcd2>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	785b      	ldrb	r3, [r3, #1]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 f996 	bl	800310e <RTC_ByteToBcd2>
 8002de2:	0003      	movs	r3, r0
 8002de4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002de6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	789b      	ldrb	r3, [r3, #2]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f98e 	bl	800310e <RTC_ByteToBcd2>
 8002df2:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002df4:	0022      	movs	r2, r4
 8002df6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	78db      	ldrb	r3, [r3, #3]
 8002dfc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e017      	b.n	8002e34 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d102      	bne.n	8002e16 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2200      	movs	r2, #0
 8002e14:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	785b      	ldrb	r3, [r3, #1]
 8002e20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e22:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e28:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	78db      	ldrb	r3, [r3, #3]
 8002e2e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	22ca      	movs	r2, #202	; 0xca
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2253      	movs	r2, #83	; 0x53
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 f937 	bl	80030ba <RTC_EnterInitMode>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d00d      	beq.n	8002e6c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	22ff      	movs	r2, #255	; 0xff
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2221      	movs	r2, #33	; 0x21
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	2100      	movs	r1, #0
 8002e66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e048      	b.n	8002efe <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4925      	ldr	r1, [pc, #148]	; (8002f08 <HAL_RTC_SetTime+0x180>)
 8002e74:	400a      	ands	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4922      	ldr	r1, [pc, #136]	; (8002f0c <HAL_RTC_SetTime+0x184>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	438a      	bics	r2, r1
 8002eae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d113      	bne.n	8002ee4 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 f8d4 	bl	800306c <HAL_RTC_WaitForSynchro>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	22ff      	movs	r2, #255	; 0xff
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2221      	movs	r2, #33	; 0x21
 8002ed4:	2104      	movs	r1, #4
 8002ed6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	2100      	movs	r1, #0
 8002ede:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e00c      	b.n	8002efe <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	22ff      	movs	r2, #255	; 0xff
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2221      	movs	r2, #33	; 0x21
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	2100      	movs	r1, #0
 8002efa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
  }
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b007      	add	sp, #28
 8002f04:	bd90      	pop	{r4, r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	007f7f7f 	.word	0x007f7f7f
 8002f0c:	fffbffff 	.word	0xfffbffff

08002f10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	5c9b      	ldrb	r3, [r3, r2]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_RTC_SetDate+0x1a>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e099      	b.n	800305e <HAL_RTC_SetDate+0x14e>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	2101      	movs	r1, #1
 8002f30:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2221      	movs	r2, #33	; 0x21
 8002f36:	2102      	movs	r1, #2
 8002f38:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10e      	bne.n	8002f5e <HAL_RTC_SetDate+0x4e>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	785b      	ldrb	r3, [r3, #1]
 8002f44:	001a      	movs	r2, r3
 8002f46:	2310      	movs	r3, #16
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d008      	beq.n	8002f5e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	2210      	movs	r2, #16
 8002f52:	4393      	bics	r3, r2
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	330a      	adds	r3, #10
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11c      	bne.n	8002f9e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	78db      	ldrb	r3, [r3, #3]
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f000 f8d0 	bl	800310e <RTC_ByteToBcd2>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 f8c9 	bl	800310e <RTC_ByteToBcd2>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f80:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	789b      	ldrb	r3, [r3, #2]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 f8c1 	bl	800310e <RTC_ByteToBcd2>
 8002f8c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f8e:	0022      	movs	r2, r4
 8002f90:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e00e      	b.n	8002fbc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	78db      	ldrb	r3, [r3, #3]
 8002fa2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002faa:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002fb0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	22ca      	movs	r2, #202	; 0xca
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2253      	movs	r2, #83	; 0x53
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 f873 	bl	80030ba <RTC_EnterInitMode>
 8002fd4:	1e03      	subs	r3, r0, #0
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2221      	movs	r2, #33	; 0x21
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	2100      	movs	r1, #0
 8002fee:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e034      	b.n	800305e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	491b      	ldr	r1, [pc, #108]	; (8003068 <HAL_RTC_SetDate+0x158>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	438a      	bics	r2, r1
 800300e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2220      	movs	r2, #32
 8003018:	4013      	ands	r3, r2
 800301a:	d113      	bne.n	8003044 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	0018      	movs	r0, r3
 8003020:	f000 f824 	bl	800306c <HAL_RTC_WaitForSynchro>
 8003024:	1e03      	subs	r3, r0, #0
 8003026:	d00d      	beq.n	8003044 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	22ff      	movs	r2, #255	; 0xff
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2221      	movs	r2, #33	; 0x21
 8003034:	2104      	movs	r1, #4
 8003036:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	2100      	movs	r1, #0
 800303e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e00c      	b.n	800305e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	22ff      	movs	r2, #255	; 0xff
 800304a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2221      	movs	r2, #33	; 0x21
 8003050:	2101      	movs	r1, #1
 8003052:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	2100      	movs	r1, #0
 800305a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800305c:	2300      	movs	r3, #0
  }
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b007      	add	sp, #28
 8003064:	bd90      	pop	{r4, r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	00ffff3f 	.word	0x00ffff3f

0800306c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	21a0      	movs	r1, #160	; 0xa0
 8003080:	438a      	bics	r2, r1
 8003082:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003084:	f7fe f946 	bl	8001314 <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800308c:	e00a      	b.n	80030a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800308e:	f7fe f941 	bl	8001314 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad2      	subs	r2, r2, r3
 8003098:	23fa      	movs	r3, #250	; 0xfa
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d901      	bls.n	80030a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e006      	b.n	80030b2 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	4013      	ands	r3, r2
 80030ae:	d0ee      	beq.n	800308e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b004      	add	sp, #16
 80030b8:	bd80      	pop	{r7, pc}

080030ba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2240      	movs	r2, #64	; 0x40
 80030ca:	4013      	ands	r3, r2
 80030cc:	d11a      	bne.n	8003104 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2201      	movs	r2, #1
 80030d4:	4252      	negs	r2, r2
 80030d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80030d8:	f7fe f91c 	bl	8001314 <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80030e0:	e00a      	b.n	80030f8 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80030e2:	f7fe f917 	bl	8001314 <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1ad2      	subs	r2, r2, r3
 80030ec:	23fa      	movs	r3, #250	; 0xfa
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d901      	bls.n	80030f8 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e006      	b.n	8003106 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	4013      	ands	r3, r2
 8003102:	d0ee      	beq.n	80030e2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}

0800310e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	0002      	movs	r2, r0
 8003116:	1dfb      	adds	r3, r7, #7
 8003118:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800311e:	230b      	movs	r3, #11
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	1dfa      	adds	r2, r7, #7
 8003124:	7812      	ldrb	r2, [r2, #0]
 8003126:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8003128:	e008      	b.n	800313c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3301      	adds	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003130:	220b      	movs	r2, #11
 8003132:	18bb      	adds	r3, r7, r2
 8003134:	18ba      	adds	r2, r7, r2
 8003136:	7812      	ldrb	r2, [r2, #0]
 8003138:	3a0a      	subs	r2, #10
 800313a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800313c:	210b      	movs	r1, #11
 800313e:	187b      	adds	r3, r7, r1
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b09      	cmp	r3, #9
 8003144:	d8f1      	bhi.n	800312a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	b2da      	uxtb	r2, r3
 800314e:	187b      	adds	r3, r7, r1
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	b2db      	uxtb	r3, r3
}
 8003156:	0018      	movs	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	b004      	add	sp, #16
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e083      	b.n	800327a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	2382      	movs	r3, #130	; 0x82
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	429a      	cmp	r2, r3
 8003184:	d009      	beq.n	800319a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	61da      	str	r2, [r3, #28]
 800318c:	e005      	b.n	800319a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2251      	movs	r2, #81	; 0x51
 80031a4:	5c9b      	ldrb	r3, [r3, r2]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2250      	movs	r2, #80	; 0x50
 80031b0:	2100      	movs	r1, #0
 80031b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7fd feb0 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2251      	movs	r2, #81	; 0x51
 80031c0:	2102      	movs	r1, #2
 80031c2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2140      	movs	r1, #64	; 0x40
 80031d0:	438a      	bics	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	2382      	movs	r3, #130	; 0x82
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	401a      	ands	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6899      	ldr	r1, [r3, #8]
 80031e2:	2384      	movs	r3, #132	; 0x84
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	400b      	ands	r3, r1
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68d9      	ldr	r1, [r3, #12]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	400b      	ands	r3, r1
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2102      	movs	r1, #2
 80031fc:	400b      	ands	r3, r1
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	2101      	movs	r1, #1
 8003206:	400b      	ands	r3, r1
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6999      	ldr	r1, [r3, #24]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	400b      	ands	r3, r1
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	2138      	movs	r1, #56	; 0x38
 800321c:	400b      	ands	r3, r1
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	400b      	ands	r3, r1
 8003228:	431a      	orrs	r2, r3
 800322a:	0011      	movs	r1, r2
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	019b      	lsls	r3, r3, #6
 8003234:	401a      	ands	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	0c1b      	lsrs	r3, r3, #16
 8003244:	2204      	movs	r2, #4
 8003246:	4013      	ands	r3, r2
 8003248:	0019      	movs	r1, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	2210      	movs	r2, #16
 8003250:	401a      	ands	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4907      	ldr	r1, [pc, #28]	; (8003284 <HAL_SPI_Init+0x124>)
 8003266:	400a      	ands	r2, r1
 8003268:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2251      	movs	r2, #81	; 0x51
 8003274:	2101      	movs	r1, #1
 8003276:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b002      	add	sp, #8
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	fffff7ff 	.word	0xfffff7ff

08003288 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e032      	b.n	8003300 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2239      	movs	r2, #57	; 0x39
 800329e:	5c9b      	ldrb	r3, [r3, r2]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2238      	movs	r2, #56	; 0x38
 80032aa:	2100      	movs	r1, #0
 80032ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7fd fe9b 	bl	8000fec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2239      	movs	r2, #57	; 0x39
 80032ba:	2102      	movs	r1, #2
 80032bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	0019      	movs	r1, r3
 80032c8:	0010      	movs	r0, r2
 80032ca:	f000 f875 	bl	80033b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	223e      	movs	r2, #62	; 0x3e
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	223a      	movs	r2, #58	; 0x3a
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	223b      	movs	r2, #59	; 0x3b
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	223c      	movs	r2, #60	; 0x3c
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	223d      	movs	r2, #61	; 0x3d
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2239      	movs	r2, #57	; 0x39
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2317      	movs	r3, #23
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2238      	movs	r2, #56	; 0x38
 8003320:	5c9b      	ldrb	r3, [r3, r2]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_TIM_OC_ConfigChannel+0x22>
 8003326:	2302      	movs	r3, #2
 8003328:	e042      	b.n	80033b0 <HAL_TIM_OC_ConfigChannel+0xa8>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2238      	movs	r2, #56	; 0x38
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d027      	beq.n	8003388 <HAL_TIM_OC_ConfigChannel+0x80>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d82c      	bhi.n	8003398 <HAL_TIM_OC_ConfigChannel+0x90>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d019      	beq.n	8003378 <HAL_TIM_OC_ConfigChannel+0x70>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b08      	cmp	r3, #8
 8003348:	d826      	bhi.n	8003398 <HAL_TIM_OC_ConfigChannel+0x90>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_TIM_OC_ConfigChannel+0x50>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b04      	cmp	r3, #4
 8003354:	d008      	beq.n	8003368 <HAL_TIM_OC_ConfigChannel+0x60>
 8003356:	e01f      	b.n	8003398 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	0011      	movs	r1, r2
 8003360:	0018      	movs	r0, r3
 8003362:	f000 f87d 	bl	8003460 <TIM_OC1_SetConfig>
      break;
 8003366:	e01c      	b.n	80033a2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	0011      	movs	r1, r2
 8003370:	0018      	movs	r0, r3
 8003372:	f000 f8b1 	bl	80034d8 <TIM_OC2_SetConfig>
      break;
 8003376:	e014      	b.n	80033a2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	0011      	movs	r1, r2
 8003380:	0018      	movs	r0, r3
 8003382:	f000 f8eb 	bl	800355c <TIM_OC3_SetConfig>
      break;
 8003386:	e00c      	b.n	80033a2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	0011      	movs	r1, r2
 8003390:	0018      	movs	r0, r3
 8003392:	f000 f923 	bl	80035dc <TIM_OC4_SetConfig>
      break;
 8003396:	e004      	b.n	80033a2 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8003398:	2317      	movs	r3, #23
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
      break;
 80033a0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2238      	movs	r2, #56	; 0x38
 80033a6:	2100      	movs	r1, #0
 80033a8:	5499      	strb	r1, [r3, r2]

  return status;
 80033aa:	2317      	movs	r3, #23
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	781b      	ldrb	r3, [r3, #0]
}
 80033b0:	0018      	movs	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b006      	add	sp, #24
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	05db      	lsls	r3, r3, #23
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d007      	beq.n	80033e2 <TIM_Base_SetConfig+0x2a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <TIM_Base_SetConfig+0x9c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_Base_SetConfig+0x2a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <TIM_Base_SetConfig+0xa0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2270      	movs	r2, #112	; 0x70
 80033e6:	4393      	bics	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	05db      	lsls	r3, r3, #23
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d007      	beq.n	800340e <TIM_Base_SetConfig+0x56>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a14      	ldr	r2, [pc, #80]	; (8003454 <TIM_Base_SetConfig+0x9c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_Base_SetConfig+0x56>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a13      	ldr	r2, [pc, #76]	; (8003458 <TIM_Base_SetConfig+0xa0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a12      	ldr	r2, [pc, #72]	; (800345c <TIM_Base_SetConfig+0xa4>)
 8003412:	4013      	ands	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	4393      	bics	r3, r2
 8003426:	001a      	movs	r2, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	615a      	str	r2, [r3, #20]
}
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	b004      	add	sp, #16
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40010800 	.word	0x40010800
 8003458:	40011400 	.word	0x40011400
 800345c:	fffffcff 	.word	0xfffffcff

08003460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	2201      	movs	r2, #1
 8003470:	4393      	bics	r3, r2
 8003472:	001a      	movs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2270      	movs	r2, #112	; 0x70
 800348e:	4393      	bics	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2203      	movs	r2, #3
 8003496:	4393      	bics	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2202      	movs	r2, #2
 80034a8:	4393      	bics	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	621a      	str	r2, [r3, #32]
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b006      	add	sp, #24
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	2210      	movs	r2, #16
 80034e8:	4393      	bics	r3, r2
 80034ea:	001a      	movs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4a13      	ldr	r2, [pc, #76]	; (8003554 <TIM_OC2_SetConfig+0x7c>)
 8003506:	4013      	ands	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a12      	ldr	r2, [pc, #72]	; (8003558 <TIM_OC2_SetConfig+0x80>)
 800350e:	4013      	ands	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2220      	movs	r2, #32
 8003522:	4393      	bics	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	621a      	str	r2, [r3, #32]
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b006      	add	sp, #24
 8003552:	bd80      	pop	{r7, pc}
 8003554:	ffff8fff 	.word	0xffff8fff
 8003558:	fffffcff 	.word	0xfffffcff

0800355c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <TIM_OC3_SetConfig+0x78>)
 800356c:	401a      	ands	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2270      	movs	r2, #112	; 0x70
 8003588:	4393      	bics	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2203      	movs	r2, #3
 8003590:	4393      	bics	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <TIM_OC3_SetConfig+0x7c>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	621a      	str	r2, [r3, #32]
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b006      	add	sp, #24
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	fffffeff 	.word	0xfffffeff
 80035d8:	fffffdff 	.word	0xfffffdff

080035dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4a1b      	ldr	r2, [pc, #108]	; (8003658 <TIM_OC4_SetConfig+0x7c>)
 80035ec:	401a      	ands	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a15      	ldr	r2, [pc, #84]	; (800365c <TIM_OC4_SetConfig+0x80>)
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a14      	ldr	r2, [pc, #80]	; (8003660 <TIM_OC4_SetConfig+0x84>)
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	4a10      	ldr	r2, [pc, #64]	; (8003664 <TIM_OC4_SetConfig+0x88>)
 8003624:	4013      	ands	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	031b      	lsls	r3, r3, #12
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	621a      	str	r2, [r3, #32]
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b006      	add	sp, #24
 8003654:	bd80      	pop	{r7, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	ffffefff 	.word	0xffffefff
 800365c:	ffff8fff 	.word	0xffff8fff
 8003660:	fffffcff 	.word	0xfffffcff
 8003664:	ffffdfff 	.word	0xffffdfff

08003668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2238      	movs	r2, #56	; 0x38
 8003676:	5c9b      	ldrb	r3, [r3, r2]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800367c:	2302      	movs	r3, #2
 800367e:	e042      	b.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2238      	movs	r2, #56	; 0x38
 8003684:	2101      	movs	r1, #1
 8003686:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2239      	movs	r2, #57	; 0x39
 800368c:	2102      	movs	r1, #2
 800368e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2270      	movs	r2, #112	; 0x70
 80036a4:	4393      	bics	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	05db      	lsls	r3, r3, #23
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d009      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a11      	ldr	r2, [pc, #68]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10c      	bne.n	80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	4393      	bics	r3, r2
 80036e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2239      	movs	r2, #57	; 0x39
 80036f8:	2101      	movs	r1, #1
 80036fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2238      	movs	r2, #56	; 0x38
 8003700:	2100      	movs	r1, #0
 8003702:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b004      	add	sp, #16
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	40010800 	.word	0x40010800
 8003714:	40011400 	.word	0x40011400

08003718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e044      	b.n	80037b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372e:	2b00      	cmp	r3, #0
 8003730:	d107      	bne.n	8003742 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2274      	movs	r2, #116	; 0x74
 8003736:	2100      	movs	r1, #0
 8003738:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f7fd fb8f 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2224      	movs	r2, #36	; 0x24
 8003746:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2101      	movs	r1, #1
 8003754:	438a      	bics	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	0018      	movs	r0, r3
 800375c:	f000 f830 	bl	80037c0 <UART_SetConfig>
 8003760:	0003      	movs	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e024      	b.n	80037b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	0018      	movs	r0, r3
 8003776:	f000 faa7 	bl	8003cc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	490d      	ldr	r1, [pc, #52]	; (80037bc <HAL_UART_Init+0xa4>)
 8003786:	400a      	ands	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	212a      	movs	r1, #42	; 0x2a
 8003796:	438a      	bics	r2, r1
 8003798:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2101      	movs	r1, #1
 80037a6:	430a      	orrs	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 fb3f 	bl	8003e30 <UART_CheckIdleState>
 80037b2:	0003      	movs	r3, r0
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b002      	add	sp, #8
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	ffffb7ff 	.word	0xffffb7ff

080037c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c0:	b5b0      	push	{r4, r5, r7, lr}
 80037c2:	b08e      	sub	sp, #56	; 0x38
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c8:	231a      	movs	r3, #26
 80037ca:	2218      	movs	r2, #24
 80037cc:	189b      	adds	r3, r3, r2
 80037ce:	19db      	adds	r3, r3, r7
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	431a      	orrs	r2, r3
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4ac6      	ldr	r2, [pc, #792]	; (8003b0c <UART_SetConfig+0x34c>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4ac1      	ldr	r2, [pc, #772]	; (8003b10 <UART_SetConfig+0x350>)
 800380a:	4013      	ands	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4abb      	ldr	r2, [pc, #748]	; (8003b14 <UART_SetConfig+0x354>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003830:	4313      	orrs	r3, r2
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	4ab7      	ldr	r2, [pc, #732]	; (8003b18 <UART_SetConfig+0x358>)
 800383c:	4013      	ands	r3, r2
 800383e:	0019      	movs	r1, r3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4ab3      	ldr	r2, [pc, #716]	; (8003b1c <UART_SetConfig+0x35c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d131      	bne.n	80038b8 <UART_SetConfig+0xf8>
 8003854:	4bb2      	ldr	r3, [pc, #712]	; (8003b20 <UART_SetConfig+0x360>)
 8003856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003858:	2203      	movs	r2, #3
 800385a:	4013      	ands	r3, r2
 800385c:	2b03      	cmp	r3, #3
 800385e:	d01d      	beq.n	800389c <UART_SetConfig+0xdc>
 8003860:	d823      	bhi.n	80038aa <UART_SetConfig+0xea>
 8003862:	2b02      	cmp	r3, #2
 8003864:	d00c      	beq.n	8003880 <UART_SetConfig+0xc0>
 8003866:	d820      	bhi.n	80038aa <UART_SetConfig+0xea>
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <UART_SetConfig+0xb2>
 800386c:	2b01      	cmp	r3, #1
 800386e:	d00e      	beq.n	800388e <UART_SetConfig+0xce>
 8003870:	e01b      	b.n	80038aa <UART_SetConfig+0xea>
 8003872:	231b      	movs	r3, #27
 8003874:	2218      	movs	r2, #24
 8003876:	189b      	adds	r3, r3, r2
 8003878:	19db      	adds	r3, r3, r7
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e09c      	b.n	80039ba <UART_SetConfig+0x1fa>
 8003880:	231b      	movs	r3, #27
 8003882:	2218      	movs	r2, #24
 8003884:	189b      	adds	r3, r3, r2
 8003886:	19db      	adds	r3, r3, r7
 8003888:	2202      	movs	r2, #2
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e095      	b.n	80039ba <UART_SetConfig+0x1fa>
 800388e:	231b      	movs	r3, #27
 8003890:	2218      	movs	r2, #24
 8003892:	189b      	adds	r3, r3, r2
 8003894:	19db      	adds	r3, r3, r7
 8003896:	2204      	movs	r2, #4
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e08e      	b.n	80039ba <UART_SetConfig+0x1fa>
 800389c:	231b      	movs	r3, #27
 800389e:	2218      	movs	r2, #24
 80038a0:	189b      	adds	r3, r3, r2
 80038a2:	19db      	adds	r3, r3, r7
 80038a4:	2208      	movs	r2, #8
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e087      	b.n	80039ba <UART_SetConfig+0x1fa>
 80038aa:	231b      	movs	r3, #27
 80038ac:	2218      	movs	r2, #24
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	19db      	adds	r3, r3, r7
 80038b2:	2210      	movs	r2, #16
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e080      	b.n	80039ba <UART_SetConfig+0x1fa>
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a99      	ldr	r2, [pc, #612]	; (8003b24 <UART_SetConfig+0x364>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d131      	bne.n	8003926 <UART_SetConfig+0x166>
 80038c2:	4b97      	ldr	r3, [pc, #604]	; (8003b20 <UART_SetConfig+0x360>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	220c      	movs	r2, #12
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d01d      	beq.n	800390a <UART_SetConfig+0x14a>
 80038ce:	d823      	bhi.n	8003918 <UART_SetConfig+0x158>
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d00c      	beq.n	80038ee <UART_SetConfig+0x12e>
 80038d4:	d820      	bhi.n	8003918 <UART_SetConfig+0x158>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <UART_SetConfig+0x120>
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d00e      	beq.n	80038fc <UART_SetConfig+0x13c>
 80038de:	e01b      	b.n	8003918 <UART_SetConfig+0x158>
 80038e0:	231b      	movs	r3, #27
 80038e2:	2218      	movs	r2, #24
 80038e4:	189b      	adds	r3, r3, r2
 80038e6:	19db      	adds	r3, r3, r7
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	e065      	b.n	80039ba <UART_SetConfig+0x1fa>
 80038ee:	231b      	movs	r3, #27
 80038f0:	2218      	movs	r2, #24
 80038f2:	189b      	adds	r3, r3, r2
 80038f4:	19db      	adds	r3, r3, r7
 80038f6:	2202      	movs	r2, #2
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	e05e      	b.n	80039ba <UART_SetConfig+0x1fa>
 80038fc:	231b      	movs	r3, #27
 80038fe:	2218      	movs	r2, #24
 8003900:	189b      	adds	r3, r3, r2
 8003902:	19db      	adds	r3, r3, r7
 8003904:	2204      	movs	r2, #4
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	e057      	b.n	80039ba <UART_SetConfig+0x1fa>
 800390a:	231b      	movs	r3, #27
 800390c:	2218      	movs	r2, #24
 800390e:	189b      	adds	r3, r3, r2
 8003910:	19db      	adds	r3, r3, r7
 8003912:	2208      	movs	r2, #8
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e050      	b.n	80039ba <UART_SetConfig+0x1fa>
 8003918:	231b      	movs	r3, #27
 800391a:	2218      	movs	r2, #24
 800391c:	189b      	adds	r3, r3, r2
 800391e:	19db      	adds	r3, r3, r7
 8003920:	2210      	movs	r2, #16
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e049      	b.n	80039ba <UART_SetConfig+0x1fa>
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a7a      	ldr	r2, [pc, #488]	; (8003b14 <UART_SetConfig+0x354>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d13e      	bne.n	80039ae <UART_SetConfig+0x1ee>
 8003930:	4b7b      	ldr	r3, [pc, #492]	; (8003b20 <UART_SetConfig+0x360>)
 8003932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003934:	23c0      	movs	r3, #192	; 0xc0
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	4013      	ands	r3, r2
 800393a:	22c0      	movs	r2, #192	; 0xc0
 800393c:	0112      	lsls	r2, r2, #4
 800393e:	4293      	cmp	r3, r2
 8003940:	d027      	beq.n	8003992 <UART_SetConfig+0x1d2>
 8003942:	22c0      	movs	r2, #192	; 0xc0
 8003944:	0112      	lsls	r2, r2, #4
 8003946:	4293      	cmp	r3, r2
 8003948:	d82a      	bhi.n	80039a0 <UART_SetConfig+0x1e0>
 800394a:	2280      	movs	r2, #128	; 0x80
 800394c:	0112      	lsls	r2, r2, #4
 800394e:	4293      	cmp	r3, r2
 8003950:	d011      	beq.n	8003976 <UART_SetConfig+0x1b6>
 8003952:	2280      	movs	r2, #128	; 0x80
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	4293      	cmp	r3, r2
 8003958:	d822      	bhi.n	80039a0 <UART_SetConfig+0x1e0>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d004      	beq.n	8003968 <UART_SetConfig+0x1a8>
 800395e:	2280      	movs	r2, #128	; 0x80
 8003960:	00d2      	lsls	r2, r2, #3
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <UART_SetConfig+0x1c4>
 8003966:	e01b      	b.n	80039a0 <UART_SetConfig+0x1e0>
 8003968:	231b      	movs	r3, #27
 800396a:	2218      	movs	r2, #24
 800396c:	189b      	adds	r3, r3, r2
 800396e:	19db      	adds	r3, r3, r7
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	e021      	b.n	80039ba <UART_SetConfig+0x1fa>
 8003976:	231b      	movs	r3, #27
 8003978:	2218      	movs	r2, #24
 800397a:	189b      	adds	r3, r3, r2
 800397c:	19db      	adds	r3, r3, r7
 800397e:	2202      	movs	r2, #2
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e01a      	b.n	80039ba <UART_SetConfig+0x1fa>
 8003984:	231b      	movs	r3, #27
 8003986:	2218      	movs	r2, #24
 8003988:	189b      	adds	r3, r3, r2
 800398a:	19db      	adds	r3, r3, r7
 800398c:	2204      	movs	r2, #4
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e013      	b.n	80039ba <UART_SetConfig+0x1fa>
 8003992:	231b      	movs	r3, #27
 8003994:	2218      	movs	r2, #24
 8003996:	189b      	adds	r3, r3, r2
 8003998:	19db      	adds	r3, r3, r7
 800399a:	2208      	movs	r2, #8
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e00c      	b.n	80039ba <UART_SetConfig+0x1fa>
 80039a0:	231b      	movs	r3, #27
 80039a2:	2218      	movs	r2, #24
 80039a4:	189b      	adds	r3, r3, r2
 80039a6:	19db      	adds	r3, r3, r7
 80039a8:	2210      	movs	r2, #16
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	e005      	b.n	80039ba <UART_SetConfig+0x1fa>
 80039ae:	231b      	movs	r3, #27
 80039b0:	2218      	movs	r2, #24
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	19db      	adds	r3, r3, r7
 80039b6:	2210      	movs	r2, #16
 80039b8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a55      	ldr	r2, [pc, #340]	; (8003b14 <UART_SetConfig+0x354>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d000      	beq.n	80039c6 <UART_SetConfig+0x206>
 80039c4:	e084      	b.n	8003ad0 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039c6:	231b      	movs	r3, #27
 80039c8:	2218      	movs	r2, #24
 80039ca:	189b      	adds	r3, r3, r2
 80039cc:	19db      	adds	r3, r3, r7
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d01d      	beq.n	8003a10 <UART_SetConfig+0x250>
 80039d4:	dc20      	bgt.n	8003a18 <UART_SetConfig+0x258>
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d015      	beq.n	8003a06 <UART_SetConfig+0x246>
 80039da:	dc1d      	bgt.n	8003a18 <UART_SetConfig+0x258>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <UART_SetConfig+0x226>
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d005      	beq.n	80039f0 <UART_SetConfig+0x230>
 80039e4:	e018      	b.n	8003a18 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e6:	f7fe ffcf 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 80039ea:	0003      	movs	r3, r0
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039ee:	e01c      	b.n	8003a2a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <UART_SetConfig+0x360>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2210      	movs	r2, #16
 80039f6:	4013      	ands	r3, r2
 80039f8:	d002      	beq.n	8003a00 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80039fa:	4b4b      	ldr	r3, [pc, #300]	; (8003b28 <UART_SetConfig+0x368>)
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80039fe:	e014      	b.n	8003a2a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003a00:	4b4a      	ldr	r3, [pc, #296]	; (8003b2c <UART_SetConfig+0x36c>)
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a04:	e011      	b.n	8003a2a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a06:	f7fe ff0f 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a0e:	e00c      	b.n	8003a2a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a16:	e008      	b.n	8003a2a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003a1c:	231a      	movs	r3, #26
 8003a1e:	2218      	movs	r2, #24
 8003a20:	189b      	adds	r3, r3, r2
 8003a22:	19db      	adds	r3, r3, r7
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
        break;
 8003a28:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d100      	bne.n	8003a32 <UART_SetConfig+0x272>
 8003a30:	e133      	b.n	8003c9a <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	0013      	movs	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d305      	bcc.n	8003a4e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d906      	bls.n	8003a5c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003a4e:	231a      	movs	r3, #26
 8003a50:	2218      	movs	r2, #24
 8003a52:	189b      	adds	r3, r3, r2
 8003a54:	19db      	adds	r3, r3, r7
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	e11e      	b.n	8003c9a <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	6939      	ldr	r1, [r7, #16]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	000b      	movs	r3, r1
 8003a6a:	0e1b      	lsrs	r3, r3, #24
 8003a6c:	0010      	movs	r0, r2
 8003a6e:	0205      	lsls	r5, r0, #8
 8003a70:	431d      	orrs	r5, r3
 8003a72:	000b      	movs	r3, r1
 8003a74:	021c      	lsls	r4, r3, #8
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	68b8      	ldr	r0, [r7, #8]
 8003a84:	68f9      	ldr	r1, [r7, #12]
 8003a86:	1900      	adds	r0, r0, r4
 8003a88:	4169      	adcs	r1, r5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f7fc fbc2 	bl	8000220 <__aeabi_uldivmod>
 8003a9c:	0002      	movs	r2, r0
 8003a9e:	000b      	movs	r3, r1
 8003aa0:	0013      	movs	r3, r2
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aa6:	23c0      	movs	r3, #192	; 0xc0
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d309      	bcc.n	8003ac2 <UART_SetConfig+0x302>
 8003aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	035b      	lsls	r3, r3, #13
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d204      	bcs.n	8003ac2 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003abe:	60da      	str	r2, [r3, #12]
 8003ac0:	e0eb      	b.n	8003c9a <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 8003ac2:	231a      	movs	r3, #26
 8003ac4:	2218      	movs	r2, #24
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	19db      	adds	r3, r3, r7
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e0e4      	b.n	8003c9a <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d000      	beq.n	8003ade <UART_SetConfig+0x31e>
 8003adc:	e086      	b.n	8003bec <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8003ade:	231b      	movs	r3, #27
 8003ae0:	2218      	movs	r2, #24
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	19db      	adds	r3, r3, r7
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d837      	bhi.n	8003b5c <UART_SetConfig+0x39c>
 8003aec:	009a      	lsls	r2, r3, #2
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <UART_SetConfig+0x370>)
 8003af0:	18d3      	adds	r3, r2, r3
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af6:	f7fe ff47 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8003afa:	0003      	movs	r3, r0
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003afe:	e036      	b.n	8003b6e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b00:	f7fe ff58 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8003b04:	0003      	movs	r3, r0
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b08:	e031      	b.n	8003b6e <UART_SetConfig+0x3ae>
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	efff69f3 	.word	0xefff69f3
 8003b10:	ffffcfff 	.word	0xffffcfff
 8003b14:	40004800 	.word	0x40004800
 8003b18:	fffff4ff 	.word	0xfffff4ff
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40004400 	.word	0x40004400
 8003b28:	003d0900 	.word	0x003d0900
 8003b2c:	00f42400 	.word	0x00f42400
 8003b30:	080040dc 	.word	0x080040dc
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b34:	4b60      	ldr	r3, [pc, #384]	; (8003cb8 <UART_SetConfig+0x4f8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d002      	beq.n	8003b44 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b3e:	4b5f      	ldr	r3, [pc, #380]	; (8003cbc <UART_SetConfig+0x4fc>)
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b42:	e014      	b.n	8003b6e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003b44:	4b5e      	ldr	r3, [pc, #376]	; (8003cc0 <UART_SetConfig+0x500>)
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b48:	e011      	b.n	8003b6e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4a:	f7fe fe6d 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8003b4e:	0003      	movs	r3, r0
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b52:	e00c      	b.n	8003b6e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b5a:	e008      	b.n	8003b6e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b60:	231a      	movs	r3, #26
 8003b62:	2218      	movs	r2, #24
 8003b64:	189b      	adds	r3, r3, r2
 8003b66:	19db      	adds	r3, r3, r7
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
        break;
 8003b6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d100      	bne.n	8003b76 <UART_SetConfig+0x3b6>
 8003b74:	e091      	b.n	8003c9a <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	005a      	lsls	r2, r3, #1
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	18d2      	adds	r2, r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	0019      	movs	r1, r3
 8003b88:	0010      	movs	r0, r2
 8003b8a:	f7fc fabd 	bl	8000108 <__udivsi3>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	2b0f      	cmp	r3, #15
 8003b98:	d921      	bls.n	8003bde <UART_SetConfig+0x41e>
 8003b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	025b      	lsls	r3, r3, #9
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d21c      	bcs.n	8003bde <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	200e      	movs	r0, #14
 8003baa:	2418      	movs	r4, #24
 8003bac:	1903      	adds	r3, r0, r4
 8003bae:	19db      	adds	r3, r3, r7
 8003bb0:	210f      	movs	r1, #15
 8003bb2:	438a      	bics	r2, r1
 8003bb4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2207      	movs	r2, #7
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	b299      	uxth	r1, r3
 8003bc2:	1903      	adds	r3, r0, r4
 8003bc4:	19db      	adds	r3, r3, r7
 8003bc6:	1902      	adds	r2, r0, r4
 8003bc8:	19d2      	adds	r2, r2, r7
 8003bca:	8812      	ldrh	r2, [r2, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	1902      	adds	r2, r0, r4
 8003bd6:	19d2      	adds	r2, r2, r7
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	60da      	str	r2, [r3, #12]
 8003bdc:	e05d      	b.n	8003c9a <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8003bde:	231a      	movs	r3, #26
 8003be0:	2218      	movs	r2, #24
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	19db      	adds	r3, r3, r7
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	e056      	b.n	8003c9a <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bec:	231b      	movs	r3, #27
 8003bee:	2218      	movs	r2, #24
 8003bf0:	189b      	adds	r3, r3, r2
 8003bf2:	19db      	adds	r3, r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d822      	bhi.n	8003c40 <UART_SetConfig+0x480>
 8003bfa:	009a      	lsls	r2, r3, #2
 8003bfc:	4b31      	ldr	r3, [pc, #196]	; (8003cc4 <UART_SetConfig+0x504>)
 8003bfe:	18d3      	adds	r3, r2, r3
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c04:	f7fe fec0 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c0c:	e021      	b.n	8003c52 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c0e:	f7fe fed1 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8003c12:	0003      	movs	r3, r0
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c16:	e01c      	b.n	8003c52 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c18:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <UART_SetConfig+0x4f8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d002      	beq.n	8003c28 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <UART_SetConfig+0x4fc>)
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c26:	e014      	b.n	8003c52 <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8003c28:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <UART_SetConfig+0x500>)
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c2c:	e011      	b.n	8003c52 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2e:	f7fe fdfb 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8003c32:	0003      	movs	r3, r0
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c36:	e00c      	b.n	8003c52 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c3e:	e008      	b.n	8003c52 <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003c44:	231a      	movs	r3, #26
 8003c46:	2218      	movs	r2, #24
 8003c48:	189b      	adds	r3, r3, r2
 8003c4a:	19db      	adds	r3, r3, r7
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
        break;
 8003c50:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	085a      	lsrs	r2, r3, #1
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	18d2      	adds	r2, r2, r3
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	0019      	movs	r1, r3
 8003c68:	0010      	movs	r0, r2
 8003c6a:	f7fc fa4d 	bl	8000108 <__udivsi3>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	d909      	bls.n	8003c8e <UART_SetConfig+0x4ce>
 8003c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	025b      	lsls	r3, r3, #9
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d204      	bcs.n	8003c8e <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8a:	60da      	str	r2, [r3, #12]
 8003c8c:	e005      	b.n	8003c9a <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8003c8e:	231a      	movs	r3, #26
 8003c90:	2218      	movs	r2, #24
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	19db      	adds	r3, r3, r7
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ca6:	231a      	movs	r3, #26
 8003ca8:	2218      	movs	r2, #24
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	19db      	adds	r3, r3, r7
 8003cae:	781b      	ldrb	r3, [r3, #0]
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b00e      	add	sp, #56	; 0x38
 8003cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	003d0900 	.word	0x003d0900
 8003cc0:	00f42400 	.word	0x00f42400
 8003cc4:	08004100 	.word	0x08004100

08003cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a4a      	ldr	r2, [pc, #296]	; (8003e0c <UART_AdvFeatureConfig+0x144>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d00b      	beq.n	8003d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4a43      	ldr	r2, [pc, #268]	; (8003e10 <UART_AdvFeatureConfig+0x148>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	0019      	movs	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2204      	movs	r2, #4
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d00b      	beq.n	8003d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <UART_AdvFeatureConfig+0x14c>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d00b      	beq.n	8003d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4a34      	ldr	r2, [pc, #208]	; (8003e18 <UART_AdvFeatureConfig+0x150>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a2c      	ldr	r2, [pc, #176]	; (8003e1c <UART_AdvFeatureConfig+0x154>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	0019      	movs	r1, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	2220      	movs	r2, #32
 8003d80:	4013      	ands	r3, r2
 8003d82:	d00b      	beq.n	8003d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4a25      	ldr	r2, [pc, #148]	; (8003e20 <UART_AdvFeatureConfig+0x158>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	0019      	movs	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2240      	movs	r2, #64	; 0x40
 8003da2:	4013      	ands	r3, r2
 8003da4:	d01d      	beq.n	8003de2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <UART_AdvFeatureConfig+0x15c>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	035b      	lsls	r3, r3, #13
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d10b      	bne.n	8003de2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <UART_AdvFeatureConfig+0x160>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	4013      	ands	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4a0e      	ldr	r2, [pc, #56]	; (8003e2c <UART_AdvFeatureConfig+0x164>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	0019      	movs	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	fffdffff 	.word	0xfffdffff
 8003e10:	fffeffff 	.word	0xfffeffff
 8003e14:	fffbffff 	.word	0xfffbffff
 8003e18:	ffff7fff 	.word	0xffff7fff
 8003e1c:	ffffefff 	.word	0xffffefff
 8003e20:	ffffdfff 	.word	0xffffdfff
 8003e24:	ffefffff 	.word	0xffefffff
 8003e28:	ff9fffff 	.word	0xff9fffff
 8003e2c:	fff7ffff 	.word	0xfff7ffff

08003e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2280      	movs	r2, #128	; 0x80
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e40:	f7fd fa68 	bl	8001314 <HAL_GetTick>
 8003e44:	0003      	movs	r3, r0
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2208      	movs	r2, #8
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d10c      	bne.n	8003e70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2280      	movs	r2, #128	; 0x80
 8003e5a:	0391      	lsls	r1, r2, #14
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <UART_CheckIdleState+0x8c>)
 8003e60:	9200      	str	r2, [sp, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f000 f82c 	bl	8003ec0 <UART_WaitOnFlagUntilTimeout>
 8003e68:	1e03      	subs	r3, r0, #0
 8003e6a:	d001      	beq.n	8003e70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e021      	b.n	8003eb4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2204      	movs	r2, #4
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d10c      	bne.n	8003e98 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2280      	movs	r2, #128	; 0x80
 8003e82:	03d1      	lsls	r1, r2, #15
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <UART_CheckIdleState+0x8c>)
 8003e88:	9200      	str	r2, [sp, #0]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f000 f818 	bl	8003ec0 <UART_WaitOnFlagUntilTimeout>
 8003e90:	1e03      	subs	r3, r0, #0
 8003e92:	d001      	beq.n	8003e98 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e00d      	b.n	8003eb4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2274      	movs	r2, #116	; 0x74
 8003eae:	2100      	movs	r1, #0
 8003eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b004      	add	sp, #16
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	01ffffff 	.word	0x01ffffff

08003ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b094      	sub	sp, #80	; 0x50
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	1dfb      	adds	r3, r7, #7
 8003ece:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed0:	e0a3      	b.n	800401a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	d100      	bne.n	8003eda <UART_WaitOnFlagUntilTimeout+0x1a>
 8003ed8:	e09f      	b.n	800401a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fd fa1b 	bl	8001314 <HAL_GetTick>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d13d      	bne.n	8003f6c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8003efa:	2301      	movs	r3, #1
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	f383 8810 	msr	PRIMASK, r3
}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	494c      	ldr	r1, [pc, #304]	; (8004044 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003f12:	400a      	ands	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f18:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	f383 8810 	msr	PRIMASK, r3
}
 8003f20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f22:	f3ef 8310 	mrs	r3, PRIMASK
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	f383 8810 	msr	PRIMASK, r3
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2101      	movs	r1, #1
 8003f44:	438a      	bics	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4e:	f383 8810 	msr	PRIMASK, r3
}
 8003f52:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2274      	movs	r2, #116	; 0x74
 8003f64:	2100      	movs	r1, #0
 8003f66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e067      	b.n	800403c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2204      	movs	r2, #4
 8003f74:	4013      	ands	r3, r2
 8003f76:	d050      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	401a      	ands	r2, r3
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d146      	bne.n	800401a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2280      	movs	r2, #128	; 0x80
 8003f92:	0112      	lsls	r2, r2, #4
 8003f94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f96:	f3ef 8310 	mrs	r3, PRIMASK
 8003f9a:	613b      	str	r3, [r7, #16]
  return(result);
 8003f9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f383 8810 	msr	PRIMASK, r3
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4923      	ldr	r1, [pc, #140]	; (8004044 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fcc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fce:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f383 8810 	msr	PRIMASK, r3
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2101      	movs	r1, #1
 8003fea:	438a      	bics	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]
 8003fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	f383 8810 	msr	PRIMASK, r3
}
 8003ff8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	2120      	movs	r1, #32
 800400c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2274      	movs	r2, #116	; 0x74
 8004012:	2100      	movs	r1, #0
 8004014:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e010      	b.n	800403c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	425a      	negs	r2, r3
 800402a:	4153      	adcs	r3, r2
 800402c:	b2db      	uxtb	r3, r3
 800402e:	001a      	movs	r2, r3
 8004030:	1dfb      	adds	r3, r7, #7
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d100      	bne.n	800403a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004038:	e74b      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b014      	add	sp, #80	; 0x50
 8004042:	bd80      	pop	{r7, pc}
 8004044:	fffffe5f 	.word	0xfffffe5f

08004048 <__libc_init_array>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	2600      	movs	r6, #0
 800404c:	4d0c      	ldr	r5, [pc, #48]	; (8004080 <__libc_init_array+0x38>)
 800404e:	4c0d      	ldr	r4, [pc, #52]	; (8004084 <__libc_init_array+0x3c>)
 8004050:	1b64      	subs	r4, r4, r5
 8004052:	10a4      	asrs	r4, r4, #2
 8004054:	42a6      	cmp	r6, r4
 8004056:	d109      	bne.n	800406c <__libc_init_array+0x24>
 8004058:	2600      	movs	r6, #0
 800405a:	f000 f821 	bl	80040a0 <_init>
 800405e:	4d0a      	ldr	r5, [pc, #40]	; (8004088 <__libc_init_array+0x40>)
 8004060:	4c0a      	ldr	r4, [pc, #40]	; (800408c <__libc_init_array+0x44>)
 8004062:	1b64      	subs	r4, r4, r5
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	42a6      	cmp	r6, r4
 8004068:	d105      	bne.n	8004076 <__libc_init_array+0x2e>
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	00b3      	lsls	r3, r6, #2
 800406e:	58eb      	ldr	r3, [r5, r3]
 8004070:	4798      	blx	r3
 8004072:	3601      	adds	r6, #1
 8004074:	e7ee      	b.n	8004054 <__libc_init_array+0xc>
 8004076:	00b3      	lsls	r3, r6, #2
 8004078:	58eb      	ldr	r3, [r5, r3]
 800407a:	4798      	blx	r3
 800407c:	3601      	adds	r6, #1
 800407e:	e7f2      	b.n	8004066 <__libc_init_array+0x1e>
 8004080:	0800412c 	.word	0x0800412c
 8004084:	0800412c 	.word	0x0800412c
 8004088:	0800412c 	.word	0x0800412c
 800408c:	08004130 	.word	0x08004130

08004090 <memset>:
 8004090:	0003      	movs	r3, r0
 8004092:	1882      	adds	r2, r0, r2
 8004094:	4293      	cmp	r3, r2
 8004096:	d100      	bne.n	800409a <memset+0xa>
 8004098:	4770      	bx	lr
 800409a:	7019      	strb	r1, [r3, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	e7f9      	b.n	8004094 <memset+0x4>

080040a0 <_init>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr

080040ac <_fini>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr
